--<ScriptOptions statementTerminator=";"/>

CREATE SCHEMA "DUOC" AUTHORIZATION "DB2ADMIN";

CREATE TABLE "DUOC"."BACSI" (
		"MABS" CHAR(5 OCTETS) NOT NULL, 
		"HOTEN" VARCHAR(100 OCTETS)
	)
	ORGANIZE BY ROW
	DATA CAPTURE NONE 
	IN "USERSPACE1"
	COMPRESS NO;

CREATE TABLE "DUOC"."CACHDUNG" (
		"CACHDUNGID" SMALLINT NOT NULL, 
		"NOIDUNG" VARCHAR(200 OCTETS)
	)
	ORGANIZE BY ROW
	DATA CAPTURE NONE 
	IN "USERSPACE1"
	COMPRESS NO;

CREATE TABLE "DUOC"."CHITIETNHAP" (
		"MAPN" CHAR(10 OCTETS) NOT NULL, 
		"MASP" CHAR(10 OCTETS) NOT NULL, 
		"MASPSD" CHAR(15 OCTETS), 
		"QUICACHID" CHAR(3 OCTETS) NOT NULL, 
		"SODANGKY" VARCHAR(30 OCTETS), 
		"SOLO" VARCHAR(30 OCTETS), 
		"HANDUNG" CHAR(6 OCTETS), 
		"SOLUONGQUICACH" DOUBLE, 
		"SOLUONGQUIDOI" SMALLINT, 
		"DONGIAQUICACH" DOUBLE, 
		"VAT" DOUBLE DEFAULT 0, 
		"SOLUONG" DOUBLE, 
		"GIANHAP" DOUBLE DEFAULT 0, 
		"GIAXUAT" DOUBLE DEFAULT 0, 
		"CHIETKHAU" DOUBLE, 
		"STT" SMALLINT
	)
	ORGANIZE BY ROW
	DATA CAPTURE NONE 
	IN "USERSPACE1"
	COMPRESS NO;

CREATE TABLE "DUOC"."CHITIETTHANHLY" (
		"MATL" CHAR(10 OCTETS), 
		"MASPSD" CHAR(15 OCTETS), 
		"HANDUNG" CHAR(6 OCTETS), 
		"SOLUONG" DOUBLE
	)
	ORGANIZE BY ROW
	DATA CAPTURE NONE 
	IN "USERSPACE1"
	COMPRESS NO;

CREATE TABLE "DUOC"."CHITIETTRANCC" (
		"MAPTNCC" CHAR(10 OCTETS) NOT NULL, 
		"MASPSD" CHAR(15 OCTETS) NOT NULL, 
		"HANDUNG" CHAR(6 OCTETS), 
		"SOLUONG" DOUBLE
	)
	ORGANIZE BY ROW
	DATA CAPTURE NONE 
	IN "USERSPACE1"
	COMPRESS NO;

CREATE TABLE "DUOC"."CHITIETXUAT" (
		"MAPX" CHAR(10 OCTETS) NOT NULL, 
		"MASPSD" CHAR(15 OCTETS) NOT NULL, 
		"HANDUNG" CHAR(6 OCTETS), 
		"SOLUONG" SMALLINT NOT NULL DEFAULT 1, 
		"GIAXUAT" DOUBLE NOT NULL DEFAULT 0, 
		"XUATID" CHAR(15 OCTETS) NOT NULL, 
		"CACHDUNG" VARCHAR(200 OCTETS)
	)
	ORGANIZE BY ROW
	DATA CAPTURE NONE 
	IN "USERSPACE1"
	COMPRESS NO;

CREATE TABLE "DUOC"."DONVI" (
		"DONVIID" CHAR(3 OCTETS) NOT NULL, 
		"TENDONVI" VARCHAR(30 OCTETS) NOT NULL
	)
	ORGANIZE BY ROW
	DATA CAPTURE NONE 
	IN "USERSPACE1"
	COMPRESS NO;

CREATE TABLE "DUOC"."GIABAN" (
		"STT" SMALLINT NOT NULL, 
		"GIATHAP" DOUBLE, 
		"GIACAO" DOUBLE, 
		"TYLE" SMALLINT
	)
	ORGANIZE BY ROW
	DATA CAPTURE NONE 
	IN "USERSPACE1"
	COMPRESS NO;

CREATE TABLE "DUOC"."KHACHHANG" (
		"MAKH" CHAR(10 OCTETS) NOT NULL, 
		"TENKH" VARCHAR(50 OCTETS) NOT NULL, 
		"DIACHI" VARCHAR(100 OCTETS), 
		"DIENTHOAI" VARCHAR(50 OCTETS), 
		"HIEULUC" SMALLINT NOT NULL DEFAULT 1, 
		"NAMSINH" SMALLINT, 
		"GIOITINH" SMALLINT
	)
	ORGANIZE BY ROW
	DATA CAPTURE NONE 
	IN "USERSPACE1"
	COMPRESS NO;

CREATE TABLE "DUOC"."KHO" (
		"MAKHO" CHAR(2 OCTETS) NOT NULL, 
		"TENKHO" VARCHAR(50 OCTETS) NOT NULL, 
		"HIEULUC" SMALLINT DEFAULT 1
	)
	ORGANIZE BY ROW
	DATA CAPTURE NONE 
	IN "USERSPACE1"
	COMPRESS NO;

CREATE TABLE "DUOC"."KHOAPHONG" (
		"MAKP" CHAR(3 OCTETS) NOT NULL, 
		"TENKP" VARCHAR(50 OCTETS), 
		"KYHIEU" VARCHAR(10 OCTETS), 
		"SOGIUONGKH" SMALLINT, 
		"SOGIUONGTK" SMALLINT, 
		"LOAI" SMALLINT, 
		"HIEULUC" SMALLINT, 
		"MASPSD" CHAR(15 OCTETS), 
		"MAKPMEDI" CHAR(2 OCTETS), 
		"STT" SMALLINT DEFAULT 0
	)
	ORGANIZE BY ROW
	DATA CAPTURE NONE 
	IN "USERSPACE1"
	COMPRESS NO;

CREATE TABLE "DUOC"."LOAISP" (
		"LOAISPID" CHAR(2 OCTETS) NOT NULL, 
		"TENLOAISP" VARCHAR(50 OCTETS) NOT NULL
	)
	ORGANIZE BY ROW
	DATA CAPTURE NONE 
	IN "USERSPACE1"
	COMPRESS NO;

CREATE TABLE "DUOC"."LOAITHANHLY" (
		"LOAITLID" CHAR(2 OCTETS) NOT NULL, 
		"TENLOAITL" VARCHAR(50 OCTETS) NOT NULL
	)
	ORGANIZE BY ROW
	DATA CAPTURE NONE 
	IN "USERSPACE1"
	COMPRESS NO;

CREATE TABLE "DUOC"."LOIDAN" (
		"LOIDANID" SMALLINT NOT NULL, 
		"NOIDUNG" VARCHAR(300 OCTETS)
	)
	ORGANIZE BY ROW
	DATA CAPTURE NONE 
	IN "USERSPACE1"
	COMPRESS NO;

CREATE TABLE "DUOC"."NGUOIDUNG" (
		"TENDANGNHAP" CHAR(50 OCTETS) NOT NULL, 
		"MATKHAU" CHAR(50 OCTETS), 
		"HOTEN" VARCHAR(50 OCTETS)
	)
	ORGANIZE BY ROW
	DATA CAPTURE NONE 
	IN "USERSPACE1"
	COMPRESS NO;

CREATE TABLE "DUOC"."NGUONSP" (
		"NGUONSPID" CHAR(2 OCTETS) NOT NULL, 
		"TENNGUONSP" VARCHAR(100 OCTETS) NOT NULL
	)
	ORGANIZE BY ROW
	DATA CAPTURE NONE 
	IN "USERSPACE1"
	COMPRESS NO;

CREATE TABLE "DUOC"."NHACUNGCAP" (
		"MANCC" CHAR(5 OCTETS) NOT NULL, 
		"TENNCC" VARCHAR(50 OCTETS) NOT NULL, 
		"DIACHI" VARCHAR(100 OCTETS), 
		"SOTAIKHOAN" VARCHAR(20 OCTETS), 
		"DIENTHOAI" VARCHAR(20 OCTETS)
	)
	ORGANIZE BY ROW
	DATA CAPTURE NONE 
	IN "USERSPACE1"
	COMPRESS NO;

CREATE TABLE "DUOC"."NHOMSP" (
		"NHOMSPID" CHAR(5 OCTETS) NOT NULL, 
		"LOAISPID" CHAR(2 OCTETS) NOT NULL, 
		"TENNHOMSP" VARCHAR(200 OCTETS) NOT NULL
	)
	ORGANIZE BY ROW
	DATA CAPTURE NONE 
	IN "USERSPACE1"
	COMPRESS NO;

CREATE TABLE "DUOC"."PHIEUNHAP" (
		"MAPN" CHAR(10 OCTETS) NOT NULL, 
		"MANCC" CHAR(5 OCTETS) NOT NULL, 
		"NGUONSPID" CHAR(2 OCTETS) NOT NULL, 
		"MAKHO" CHAR(2 OCTETS) NOT NULL, 
		"NGAY" DATE NOT NULL DEFAULT CURRENT DATE, 
		"SOHD" VARCHAR(30 OCTETS), 
		"NGAYHD" DATE, 
		"CHIETKHAU" DOUBLE, 
		"DADUYET" SMALLINT DEFAULT 0
	)
	ORGANIZE BY ROW
	DATA CAPTURE NONE 
	IN "USERSPACE1"
	COMPRESS NO;

CREATE TABLE "DUOC"."PHIEUTHANHLY" (
		"MATL" CHAR(10 OCTETS) NOT NULL, 
		"LOAITLID" CHAR(2 OCTETS), 
		"MAKHO" CHAR(2 OCTETS), 
		"NGAY" DATE, 
		"DADUYET" SMALLINT DEFAULT 0, 
		"NGAYDUYET" DATE
	)
	ORGANIZE BY ROW
	DATA CAPTURE NONE 
	IN "USERSPACE1"
	COMPRESS NO;

CREATE TABLE "DUOC"."PHIEUTRANCC" (
		"MAPTNCC" CHAR(10 OCTETS) NOT NULL, 
		"MANCC" CHAR(5 OCTETS), 
		"MAKHO" CHAR(2 OCTETS), 
		"NGAY" DATE, 
		"DADUYET" SMALLINT DEFAULT 0, 
		"NGAYDUYET" DATE
	)
	ORGANIZE BY ROW
	DATA CAPTURE NONE 
	IN "USERSPACE1"
	COMPRESS NO;

CREATE TABLE "DUOC"."PHIEUXUAT" (
		"MAPX" CHAR(10 OCTETS) NOT NULL, 
		"MAKH" CHAR(10 OCTETS) NOT NULL, 
		"MAKHO" CHAR(2 OCTETS), 
		"NGAY" DATE NOT NULL DEFAULT CURRENT DATE, 
		"DADUYET" SMALLINT, 
		"NGAYDUYET" DATE, 
		"MABS" CHAR(5 OCTETS), 
		"CHANDOAN" VARCHAR(200 OCTETS), 
		"MAKP" CHAR(3 OCTETS), 
		"TENDANGNHAP" CHAR(50 OCTETS), 
		"LOIDAN" VARCHAR(300 OCTETS)
	)
	ORGANIZE BY ROW
	DATA CAPTURE NONE 
	IN "USERSPACE1"
	COMPRESS NO;

CREATE TABLE "DUOC"."QUICACH" (
		"QUICACHID" CHAR(3 OCTETS) NOT NULL, 
		"TENQUICACH" VARCHAR(30 OCTETS) NOT NULL
	)
	ORGANIZE BY ROW
	DATA CAPTURE NONE 
	IN "USERSPACE1"
	COMPRESS NO;

CREATE TABLE "DUOC"."SANPHAM" (
		"MASP" CHAR(10 OCTETS) NOT NULL, 
		"DONVIID" CHAR(3 OCTETS) NOT NULL, 
		"NHOMSPID" CHAR(5 OCTETS), 
		"TENSP" VARCHAR(200 OCTETS) NOT NULL, 
		"HOATCHAT" VARCHAR(200 OCTETS), 
		"HANGSX" VARCHAR(100 OCTETS), 
		"NUOCSX" VARCHAR(100 OCTETS), 
		"TRONGNUOC" SMALLINT, 
		"HIEULUC" SMALLINT NOT NULL DEFAULT 1
	)
	ORGANIZE BY ROW
	DATA CAPTURE NONE 
	IN "USERSPACE1"
	COMPRESS NO;

CREATE TABLE "DUOC"."SANPHAMSD" (
		"MASPSD" CHAR(15 OCTETS) NOT NULL, 
		"MASP" CHAR(10 OCTETS) NOT NULL, 
		"NGUONSPID" CHAR(2 OCTETS) NOT NULL, 
		"MANCC" CHAR(5 OCTETS), 
		"GIAXUAT" DOUBLE NOT NULL DEFAULT 0, 
		"GIANHAP" DOUBLE NOT NULL DEFAULT 0
	)
	ORGANIZE BY ROW
	DATA CAPTURE NONE 
	IN "USERSPACE1"
	COMPRESS NO;

CREATE TABLE "DUOC"."SANPHAMTON" (
		"NAMTHANG" CHAR(6 OCTETS) NOT NULL, 
		"MAKHO" CHAR(2 OCTETS) NOT NULL, 
		"MASPSD" CHAR(15 OCTETS) NOT NULL, 
		"HANDUNG" CHAR(6 OCTETS) NOT NULL, 
		"SOLUONG" DOUBLE DEFAULT 0, 
		"SOLUONGAO" DOUBLE
	)
	ORGANIZE BY ROW
	DATA CAPTURE NONE 
	IN "USERSPACE1"
	COMPRESS NO;

CREATE TABLE "DUOC"."THOIGIANKHOASO" (
		"NAMTHANG" CHAR(6 OCTETS) NOT NULL, 
		"TUNGAY" DATE NOT NULL, 
		"DENNGAY" DATE NOT NULL, 
		"DAKHOA" SMALLINT NOT NULL DEFAULT 0
	)
	ORGANIZE BY ROW
	DATA CAPTURE NONE 
	IN "USERSPACE1"
	COMPRESS NO;

ALTER TABLE "DUOC"."BACSI" ADD CONSTRAINT "PK_BACSI" PRIMARY KEY
	("MABS");

ALTER TABLE "DUOC"."CACHDUNG" ADD CONSTRAINT "PK_CACHDUNG" PRIMARY KEY
	("CACHDUNGID");

ALTER TABLE "DUOC"."CHITIETNHAP" ADD CONSTRAINT "C_GIANHAP" CHECK (GIANHAP is null or (GIANHAP >= 0));

ALTER TABLE "DUOC"."CHITIETNHAP" ADD CONSTRAINT "C_GIAXUAT" CHECK (GIAXUAT is null or (GIAXUAT >= 0));

ALTER TABLE "DUOC"."CHITIETNHAP" ADD CONSTRAINT "C_SOLUONG" CHECK (SOLUONG is null or (SOLUONG >= 1));

ALTER TABLE "DUOC"."CHITIETNHAP" ADD CONSTRAINT "C_VAT" CHECK (VAT is null or (VAT >= 0));

ALTER TABLE "DUOC"."CHITIETNHAP" ADD CONSTRAINT "P_PK_CHITIETNHAP" PRIMARY KEY
	("MAPN", 
	 "MASP");

ALTER TABLE "DUOC"."CHITIETTRANCC" ADD CONSTRAINT "P_PK_CHITIETTRANCC" PRIMARY KEY
	("MAPTNCC", 
	 "MASPSD");

ALTER TABLE "DUOC"."CHITIETXUAT" ADD CONSTRAINT "C_GIAXUAT" CHECK (GIAXUAT >= 0);

ALTER TABLE "DUOC"."CHITIETXUAT" ADD CONSTRAINT "C_SOLUONG" CHECK (SOLUONG >= 1);

ALTER TABLE "DUOC"."CHITIETXUAT" ADD CONSTRAINT "PK_CHITIETXUAT" PRIMARY KEY
	("XUATID");

ALTER TABLE "DUOC"."DONVI" ADD CONSTRAINT "P_PK_DONVI" PRIMARY KEY
	("DONVIID");

ALTER TABLE "DUOC"."GIABAN" ADD CONSTRAINT "PK_GIABAN" PRIMARY KEY
	("STT");

ALTER TABLE "DUOC"."KHACHHANG" ADD CONSTRAINT "C_HIEULUC" CHECK (HIEULUC in (0,1));

ALTER TABLE "DUOC"."KHACHHANG" ADD CONSTRAINT "P_PK_KHACHHANG" PRIMARY KEY
	("MAKH");

ALTER TABLE "DUOC"."KHO" ADD CONSTRAINT "C_HIEULUC" CHECK (HIEULUC is null or (HIEULUC in (0,1)));

ALTER TABLE "DUOC"."KHO" ADD CONSTRAINT "P_PK_KHO" PRIMARY KEY
	("MAKHO");

ALTER TABLE "DUOC"."KHOAPHONG" ADD CONSTRAINT "PK_KHOAPHONG" PRIMARY KEY
	("MAKP");

ALTER TABLE "DUOC"."LOAISP" ADD CONSTRAINT "P_PK_LOAISP" PRIMARY KEY
	("LOAISPID");

ALTER TABLE "DUOC"."LOAITHANHLY" ADD CONSTRAINT "P_KEY_1" PRIMARY KEY
	("LOAITLID");

ALTER TABLE "DUOC"."LOIDAN" ADD CONSTRAINT "PK_LOIDAN" PRIMARY KEY
	("LOIDANID");

ALTER TABLE "DUOC"."NGUOIDUNG" ADD CONSTRAINT "P_PK_NGUOIDUNG" PRIMARY KEY
	("TENDANGNHAP");

ALTER TABLE "DUOC"."NGUONSP" ADD CONSTRAINT "P_PK_NGUONSP" PRIMARY KEY
	("NGUONSPID");

ALTER TABLE "DUOC"."NHACUNGCAP" ADD CONSTRAINT "P_PK_NHACUNGCAP" PRIMARY KEY
	("MANCC");

ALTER TABLE "DUOC"."NHOMSP" ADD CONSTRAINT "P_PK_NHOMSP" PRIMARY KEY
	("NHOMSPID");

ALTER TABLE "DUOC"."PHIEUNHAP" ADD CONSTRAINT "C_DADUYET" CHECK (DADUYET is null or (DADUYET between 0 and 1 and DADUYET in (0,1)));

ALTER TABLE "DUOC"."PHIEUNHAP" ADD CONSTRAINT "P_PK_PHIEUNHAP" PRIMARY KEY
	("MAPN");

ALTER TABLE "DUOC"."PHIEUTHANHLY" ADD CONSTRAINT "C_DADUYET" CHECK (DADUYET is null or (DADUYET in (0,1)));

ALTER TABLE "DUOC"."PHIEUTHANHLY" ADD CONSTRAINT "P_KEY_1" PRIMARY KEY
	("MATL");

ALTER TABLE "DUOC"."PHIEUTRANCC" ADD CONSTRAINT "C_DADUYET" CHECK (DADUYET is null or (DADUYET in (0,1)));

ALTER TABLE "DUOC"."PHIEUTRANCC" ADD CONSTRAINT "P_PK_PHIEUTRANCC" PRIMARY KEY
	("MAPTNCC");

ALTER TABLE "DUOC"."PHIEUXUAT" ADD CONSTRAINT "P_PK_PHIEUXUAT" PRIMARY KEY
	("MAPX");

ALTER TABLE "DUOC"."QUICACH" ADD CONSTRAINT "P_PK_QUICACH" PRIMARY KEY
	("QUICACHID");

ALTER TABLE "DUOC"."SANPHAM" ADD CONSTRAINT "C_HIEULUC" CHECK (HIEULUC in (0,1));

ALTER TABLE "DUOC"."SANPHAM" ADD CONSTRAINT "P_PK_SANPHAM" PRIMARY KEY
	("MASP");

ALTER TABLE "DUOC"."SANPHAMSD" ADD CONSTRAINT "C_GIAXUAT" CHECK (GIAXUAT >= 0);

ALTER TABLE "DUOC"."SANPHAMSD" ADD CONSTRAINT "P_PK_SANPHAMSD" PRIMARY KEY
	("MASPSD");

ALTER TABLE "DUOC"."SANPHAMTON" ADD CONSTRAINT "C_SOLUONG" CHECK (SOLUONG is null or (SOLUONG >= 0));

ALTER TABLE "DUOC"."SANPHAMTON" ADD CONSTRAINT "P_PK_SANPHAMTON" PRIMARY KEY
	("NAMTHANG", 
	 "MAKHO", 
	 "MASPSD", 
	 "HANDUNG");

ALTER TABLE "DUOC"."THOIGIANKHOASO" ADD CONSTRAINT "C_DAKHOA" CHECK (DAKHOA in (0,1));

ALTER TABLE "DUOC"."THOIGIANKHOASO" ADD CONSTRAINT "P_PK_THOIGIANKHOAS" PRIMARY KEY
	("NAMTHANG");

ALTER TABLE "DUOC"."CHITIETNHAP" ADD CONSTRAINT "FK_ChiTiet_Nhap" FOREIGN KEY
	("MAPN")
	REFERENCES "DUOC"."PHIEUNHAP"
	("MAPN")
	ON DELETE RESTRICT
	ON UPDATE RESTRICT;

ALTER TABLE "DUOC"."CHITIETNHAP" ADD CONSTRAINT "FK_Nhap_QuiCach" FOREIGN KEY
	("QUICACHID")
	REFERENCES "DUOC"."QUICACH"
	("QUICACHID")
	ON DELETE RESTRICT
	ON UPDATE RESTRICT;

ALTER TABLE "DUOC"."CHITIETNHAP" ADD CONSTRAINT "FK_Nhap_SanPham" FOREIGN KEY
	("MASP")
	REFERENCES "DUOC"."SANPHAM"
	("MASP")
	ON DELETE RESTRICT
	ON UPDATE RESTRICT;

ALTER TABLE "DUOC"."CHITIETNHAP" ADD CONSTRAINT "FK_Nhap_SuDung" FOREIGN KEY
	("MASPSD")
	REFERENCES "DUOC"."SANPHAMSD"
	("MASPSD")
	ON DELETE RESTRICT
	ON UPDATE RESTRICT;

ALTER TABLE "DUOC"."CHITIETTHANHLY" ADD CONSTRAINT "FK_ChiTiet_ThanhLy" FOREIGN KEY
	("MATL")
	REFERENCES "DUOC"."PHIEUTHANHLY"
	("MATL")
	ON DELETE RESTRICT
	ON UPDATE RESTRICT;

ALTER TABLE "DUOC"."CHITIETTHANHLY" ADD CONSTRAINT "FK_ThanhLy_SuDung" FOREIGN KEY
	("MASPSD")
	REFERENCES "DUOC"."SANPHAMSD"
	("MASPSD")
	ON DELETE RESTRICT
	ON UPDATE RESTRICT;

ALTER TABLE "DUOC"."CHITIETTRANCC" ADD CONSTRAINT "FK_ChiTiet_TraNCC" FOREIGN KEY
	("MAPTNCC")
	REFERENCES "DUOC"."PHIEUTRANCC"
	("MAPTNCC")
	ON DELETE RESTRICT
	ON UPDATE RESTRICT;

ALTER TABLE "DUOC"."CHITIETTRANCC" ADD CONSTRAINT "FK_TraNCC_SuDung" FOREIGN KEY
	("MASPSD")
	REFERENCES "DUOC"."SANPHAMSD"
	("MASPSD")
	ON DELETE RESTRICT
	ON UPDATE RESTRICT;

ALTER TABLE "DUOC"."CHITIETXUAT" ADD CONSTRAINT "FK_CTXuat_SD" FOREIGN KEY
	("MASPSD")
	REFERENCES "DUOC"."SANPHAMSD"
	("MASPSD")
	ON DELETE RESTRICT
	ON UPDATE RESTRICT;

ALTER TABLE "DUOC"."CHITIETXUAT" ADD CONSTRAINT "FK_ChiTiet_Xuat" FOREIGN KEY
	("MAPX")
	REFERENCES "DUOC"."PHIEUXUAT"
	("MAPX")
	ON DELETE RESTRICT
	ON UPDATE RESTRICT;

ALTER TABLE "DUOC"."NHOMSP" ADD CONSTRAINT "FK_Nhom_Loai" FOREIGN KEY
	("LOAISPID")
	REFERENCES "DUOC"."LOAISP"
	("LOAISPID")
	ON DELETE RESTRICT
	ON UPDATE RESTRICT;

ALTER TABLE "DUOC"."PHIEUNHAP" ADD CONSTRAINT "FK_Nhap_Kho" FOREIGN KEY
	("MAKHO")
	REFERENCES "DUOC"."KHO"
	("MAKHO")
	ON DELETE RESTRICT
	ON UPDATE RESTRICT;

ALTER TABLE "DUOC"."PHIEUNHAP" ADD CONSTRAINT "FK_Nhap_NCC" FOREIGN KEY
	("MANCC")
	REFERENCES "DUOC"."NHACUNGCAP"
	("MANCC")
	ON DELETE RESTRICT
	ON UPDATE RESTRICT;

ALTER TABLE "DUOC"."PHIEUNHAP" ADD CONSTRAINT "FK_Nhap_Nguon" FOREIGN KEY
	("NGUONSPID")
	REFERENCES "DUOC"."NGUONSP"
	("NGUONSPID")
	ON DELETE RESTRICT
	ON UPDATE RESTRICT;

ALTER TABLE "DUOC"."PHIEUTHANHLY" ADD CONSTRAINT "FK_ThanhLy_Kho" FOREIGN KEY
	("MAKHO")
	REFERENCES "DUOC"."KHO"
	("MAKHO")
	ON DELETE RESTRICT
	ON UPDATE RESTRICT;

ALTER TABLE "DUOC"."PHIEUTHANHLY" ADD CONSTRAINT "FK_ThanhLy_Loai" FOREIGN KEY
	("LOAITLID")
	REFERENCES "DUOC"."LOAITHANHLY"
	("LOAITLID")
	ON DELETE RESTRICT
	ON UPDATE RESTRICT;

ALTER TABLE "DUOC"."PHIEUTRANCC" ADD CONSTRAINT "FK_TraNCC_Kho" FOREIGN KEY
	("MAKHO")
	REFERENCES "DUOC"."KHO"
	("MAKHO")
	ON DELETE RESTRICT
	ON UPDATE RESTRICT;

ALTER TABLE "DUOC"."PHIEUTRANCC" ADD CONSTRAINT "FK_Tra_NCC" FOREIGN KEY
	("MANCC")
	REFERENCES "DUOC"."NHACUNGCAP"
	("MANCC")
	ON DELETE RESTRICT
	ON UPDATE RESTRICT;

ALTER TABLE "DUOC"."PHIEUXUAT" ADD CONSTRAINT "FK_BACSI" FOREIGN KEY
	("MABS")
	REFERENCES "DUOC"."BACSI"
	("MABS");

ALTER TABLE "DUOC"."PHIEUXUAT" ADD CONSTRAINT "FK_KHOAPHONG" FOREIGN KEY
	("MAKP")
	REFERENCES "DUOC"."KHOAPHONG"
	("MAKP");

ALTER TABLE "DUOC"."PHIEUXUAT" ADD CONSTRAINT "FK_NGUOIDUNG" FOREIGN KEY
	("TENDANGNHAP")
	REFERENCES "DUOC"."NGUOIDUNG"
	("TENDANGNHAP");

ALTER TABLE "DUOC"."PHIEUXUAT" ADD CONSTRAINT "FK_PhieuXuat_KH" FOREIGN KEY
	("MAKH")
	REFERENCES "DUOC"."KHACHHANG"
	("MAKH")
	ON DELETE RESTRICT
	ON UPDATE RESTRICT;

ALTER TABLE "DUOC"."PHIEUXUAT" ADD CONSTRAINT "FK_Xuat_Kho" FOREIGN KEY
	("MAKHO")
	REFERENCES "DUOC"."KHO"
	("MAKHO")
	ON DELETE RESTRICT
	ON UPDATE RESTRICT;

ALTER TABLE "DUOC"."SANPHAM" ADD CONSTRAINT "FK_SanPham_DonVi" FOREIGN KEY
	("DONVIID")
	REFERENCES "DUOC"."DONVI"
	("DONVIID")
	ON DELETE RESTRICT
	ON UPDATE RESTRICT;

ALTER TABLE "DUOC"."SANPHAM" ADD CONSTRAINT "FK_SanPham_Nhom" FOREIGN KEY
	("NHOMSPID")
	REFERENCES "DUOC"."NHOMSP"
	("NHOMSPID")
	ON DELETE RESTRICT
	ON UPDATE RESTRICT;

ALTER TABLE "DUOC"."SANPHAMSD" ADD CONSTRAINT "FK_SD_Nguon" FOREIGN KEY
	("NGUONSPID")
	REFERENCES "DUOC"."NGUONSP"
	("NGUONSPID")
	ON DELETE RESTRICT
	ON UPDATE RESTRICT;

ALTER TABLE "DUOC"."SANPHAMSD" ADD CONSTRAINT "FK_SD_SanPham" FOREIGN KEY
	("MASP")
	REFERENCES "DUOC"."SANPHAM"
	("MASP")
	ON DELETE RESTRICT
	ON UPDATE RESTRICT;

ALTER TABLE "DUOC"."SANPHAMSD" ADD CONSTRAINT "FK_SuDung_NCC" FOREIGN KEY
	("MANCC")
	REFERENCES "DUOC"."NHACUNGCAP"
	("MANCC")
	ON DELETE RESTRICT
	ON UPDATE RESTRICT;

ALTER TABLE "DUOC"."SANPHAMTON" ADD CONSTRAINT "FK_SD_Ton" FOREIGN KEY
	("MASPSD")
	REFERENCES "DUOC"."SANPHAMSD"
	("MASPSD")
	ON DELETE RESTRICT
	ON UPDATE RESTRICT;

ALTER TABLE "DUOC"."SANPHAMTON" ADD CONSTRAINT "FK_Ton_Kho" FOREIGN KEY
	("MAKHO")
	REFERENCES "DUOC"."KHO"
	("MAKHO")
	ON DELETE RESTRICT
	ON UPDATE RESTRICT;

ALTER TABLE "DUOC"."SANPHAMTON" ADD CONSTRAINT "FK_Ton_KhoaSo" FOREIGN KEY
	("NAMTHANG")
	REFERENCES "DUOC"."THOIGIANKHOASO"
	("NAMTHANG")
	ON DELETE RESTRICT
	ON UPDATE RESTRICT;

CREATE VIEW "DUOC"."VIEWSANPHAM" ("MASP", "DONVIID", "NHOMSPID", "TENSP", "HOATCHAT", "HANGSX", "NUOCSX", "TRONGNUOC", "TENNHOMSP", "LOAISPID", "TENLOAISP", "TENDONVI", "HIEULUC") AS
SELECT SP.MASP, 
	SP.DONVIID, 
	SP.NHOMSPID, 
	SP.TENSP, 
	SP.HOATCHAT, 
	SP.HANGSX, 
	SP.NUOCSX, 
	SP.TRONGNUOC,
	NH.TENNHOMSP,
	NH.LOAISPID,
	LO.TENLOAISP,
	DV.TENDONVI,
	SP.HIEULUC
FROM DUOC.SANPHAM SP 
	JOIN DUOC.NHOMSP NH ON SP.NHOMSPID = NH.NHOMSPID 
	JOIN DUOC.LOAISP LO ON NH.LOAISPID = LO.LOAISPID
	JOIN DUOC.DONVI DV ON SP.DONVIID = DV.DONVIID;

CREATE FUNCTION DUOC.GETNAMTHANGTRUOC 
(
IN NAMTHANG CHAR(6)
)
RETURNS CHAR(6)
F1: BEGIN
	DECLARE M_THANG SMALLINT;--
	DECLARE M_NAM SMALLINT;--
	DECLARE M_NAMTHANGTRUOC CHAR(6);--
	SET M_NAM = CAST(LEFT(GETNAMTHANGTRUOC.NAMTHANG, 4) AS SMALLINT);--
	SET M_THANG = CAST(RIGHT(GETNAMTHANGTRUOC.NAMTHANG, 2) AS SMALLINT) - 1;--
	IF (M_THANG = 0) THEN
		SET M_NAMTHANGTRUOC = LTRIM(M_NAM - 1) || '12';--
	ELSE
		SET M_NAMTHANGTRUOC = LTRIM(M_NAM) || RIGHT('0' || LTRIM(M_THANG),2);--
	END IF;--
	RETURN M_NAMTHANGTRUOC;--
END F1;

CREATE OR REPLACE FUNCTION DUOC.CHECKKHOASONAM 
(
IN NAMTHANG CHAR(6)
) 
RETURNS SMALLINT
F1: BEGIN
	IF EXISTS(SELECT * FROM DUOC.THOIGIANKHOASO WHERE NAMTHANG = CHECKKHOASONAM.NAMTHANG AND DAKHOA = 0) THEN
		RETURN 0;
	ELSE
		RETURN 1;
	END IF;
END F1;

CREATE OR REPLACE FUNCTION DUOC.CHECKKHOASONGAY 
(
IN NGAY DATE
) 
RETURNS SMALLINT
F1: BEGIN
	IF EXISTS(SELECT * FROM DUOC.THOIGIANKHOASO WHERE CHECKKHOASONGAY.NGAY BETWEEN TUNGAY AND DENNGAY AND DAKHOA = 0) THEN
		RETURN 0;
	ELSE
		RETURN 1;
	END IF;
END F1;

CREATE OR REPLACE FUNCTION DUOC.GETGIANHAP 
(
IN MASPSD CHAR(15)
)
RETURNS FLOAT
F1: BEGIN
	DECLARE M_GIANHAP FLOAT;
	SELECT MAX(GIANHAP) INTO M_GIANHAP FROM DUOC.CHITIETNHAP WHERE MASPSD = GETGIANHAP.MASPSD;
	IF (M_GIANHAP IS NULL) THEN
		RETURN 0;
	ELSE
		RETURN M_GIANHAP;
	END IF; 
END F1;

CREATE OR REPLACE FUNCTION DUOC.GETNAM 
(
IN NAMTHANG CHAR(6)
)
RETURNS CHAR(6)
F1: BEGIN
	DECLARE M_THANG SMALLINT;
	DECLARE M_NAM SMALLINT;
	DECLARE M_NAMTHANGTRUOC CHAR(6);
	SET M_NAM = CAST(LEFT(GETNAM.NAMTHANG, 4) AS SMALLINT);
	SET M_THANG = CAST(RIGHT(GETNAM.NAMTHANG, 2) AS SMALLINT) - 1;
	IF (M_THANG = 0) THEN
		SET M_NAMTHANGTRUOC = LTRIM(M_NAM - 1) || '12';
	ELSE
		SET M_NAMTHANGTRUOC = LTRIM(M_NAM) || RIGHT('0' || LTRIM(M_THANG),2);
	END IF;
	RETURN M_NAMTHANGTRUOC;
END F1;

CREATE OR REPLACE FUNCTION DUOC.GETNAMTHANGTRUO 
(
IN NAMTHANG CHAR(6)
)
RETURNS CHAR(6)
F1: BEGIN
	DECLARE M_THANG SMALLINT;
	DECLARE M_NAM SMALLINT;
	DECLARE M_NAMTHANGTRUOC CHAR(6);
	SET M_NAM = CAST(LEFT(GETNAMTHANGTRUO.NAMTHANG, 4) AS SMALLINT);
	SET M_THANG = CAST(RIGHT(GETNAMTHANGTRUO.NAMTHANG, 2) AS SMALLINT) - 1;
	IF (M_THANG = 0) THEN
		SET M_NAMTHANGTRUOC = LTRIM(M_NAM - 1) || '12';
	ELSE
		SET M_NAMTHANGTRUOC = LTRIM(M_NAM) || RIGHT('0' || LTRIM(M_THANG),2);
	END IF;
	RETURN M_NAMTHANGTRUOC;
END F1;

CREATE OR REPLACE FUNCTION DUOC.NHAPTK 
(
IN NAMTHANG CHAR(6),
IN MAKHO CHAR(2),
IN MASPSD CHAR(15)
) 
RETURNS FLOAT
F1: BEGIN
	DECLARE M_SOLUONG FLOAT;
	SELECT SUM(SOLUONG) INTO M_SOLUONG 
	FROM DUOC.CHITIETNHAP CT JOIN DUOC.PHIEUNHAP PN ON CT.MAPN = PN.MAPN
	WHERE MASPSD = NHAPTK.MASPSD 
		AND MAKHO = NHAPTK.MAKHO
		AND PN.NGAY BETWEEN 
		(SELECT TUNGAY FROM DUOC.THOIGIANKHOASO WHERE NAMTHANG = NHAPTK.NAMTHANG)
		AND (SELECT DENNGAY FROM DUOC.THOIGIANKHOASO WHERE NAMTHANG = NHAPTK.NAMTHANG);
	IF (M_SOLUONG IS NULL) THEN
		RETURN 0;
	ELSE
		RETURN M_SOLUONG;
	END IF;
END F1;

CREATE OR REPLACE FUNCTION DUOC.THANHLY 
(
IN NAMTHANG CHAR(6),
IN MAKHO CHAR(2),
IN MASPSD CHAR(15)
) 
RETURNS FLOAT
F1: BEGIN
	DECLARE M_SOLUONG FLOAT;
	SELECT SUM(SOLUONG) INTO M_SOLUONG 
	FROM DUOC.CHITIETTHANHLY CT JOIN DUOC.PHIEUTHANHLY PX ON CT.MATL = PX.MATL
	WHERE TO_CHAR(NGAY, 'YYYYMM') = THANHLY.NAMTHANG AND MASPSD = THANHLY.MASPSD AND MAKHO = THANHLY.MAKHO;
	IF (M_SOLUONG IS NULL) THEN
		RETURN 0;
	ELSE
		RETURN M_SOLUONG;
	END IF;
END F1;

CREATE OR REPLACE FUNCTION DUOC.TONCK 
(
IN NAMTHANG CHAR(6),
IN MAKHO CHAR(2),
IN MASPSD CHAR(15)
) 
RETURNS FLOAT
F1: BEGIN
	DECLARE M_SOLUONG FLOAT;
	SELECT SUM(SOLUONG) INTO M_SOLUONG FROM DUOC.SANPHAMTON WHERE NAMTHANG = TONCK.NAMTHANG AND MASPSD = TONCK.MASPSD AND MAKHO = TONCK.MAKHO;
	IF (M_SOLUONG IS NULL) THEN
		RETURN 0;
	ELSE
		RETURN M_SOLUONG;
	END IF;
END F1;

CREATE OR REPLACE FUNCTION DUOC.TONDK
(
IN NAMTHANG CHAR(6),
IN MAKHO CHAR(2),
IN MASPSD CHAR(15)
) 
RETURNS FLOAT
F1: BEGIN
	DECLARE M_SOLUONG FLOAT;
	SELECT SUM(SOLUONG) INTO M_SOLUONG FROM DUOC.SANPHAMTON WHERE NAMTHANG = DUOC.GETNAMTHANGTRUO(TONDK.NAMTHANG) AND MASPSD = TONDK.MASPSD AND MAKHO = TONDK.MAKHO;
	IF (M_SOLUONG IS NULL) THEN
		RETURN 0;
	ELSE
		RETURN M_SOLUONG;
	END IF;
END F1;

CREATE OR REPLACE FUNCTION DUOC.TONMASPDK 
(
IN NAMTHANG CHAR(6),
IN MAKHO CHAR(2),
IN MASP CHAR(10)
) 
RETURNS FLOAT
F1: BEGIN
	DECLARE M_SOLUONG FLOAT;
	SELECT SUM(TON.SOLUONG) INTO M_SOLUONG 
	FROM DUOC.SANPHAMTON TON JOIN DUOC.SANPHAMSD SD ON TON.MASPSD = SD.MASPSD
	WHERE TON.NAMTHANG = DUOC.GETNAMTHANGTRUO(TONMASPDK.NAMTHANG) 
		AND SD.MASP = TONMASPDK.MASP 
		AND TON.MAKHO = TONMASPDK.MAKHO;

	IF (M_SOLUONG IS NULL) THEN
		RETURN 0;
	ELSE
		RETURN M_SOLUONG;
	END IF;
END F1;

CREATE OR REPLACE FUNCTION DUOC.TRANCC 
(
IN NAMTHANG CHAR(6),
IN MAKHO CHAR(2),
IN MASPSD CHAR(15)
) 
RETURNS FLOAT
F1: BEGIN
	DECLARE M_SOLUONG FLOAT;
	SELECT SUM(SOLUONG) INTO M_SOLUONG 
	FROM DUOC.CHITIETTRANCC CT JOIN DUOC.PHIEUTRANCC PX ON CT.MAPTNCC = PX.MAPTNCC
	WHERE TO_CHAR(NGAY, 'YYYYMM') = TRANCC.NAMTHANG AND MASPSD = TRANCC.MASPSD AND MAKHO = TRANCC.MAKHO;
	IF (M_SOLUONG IS NULL) THEN
		RETURN 0;
	ELSE
		RETURN M_SOLUONG;
	END IF;
END F1;

CREATE OR REPLACE FUNCTION DUOC.XUATTK 
(
IN NAMTHANG CHAR(6),
IN MAKHO CHAR(2),
IN MASPSD CHAR(15)
) 
RETURNS FLOAT
F1: BEGIN
	DECLARE M_SOLUONG FLOAT;
	SELECT SUM(SOLUONG) INTO M_SOLUONG 
	FROM DUOC.CHITIETXUAT CT JOIN DUOC.PHIEUXUAT PX ON CT.MAPX = PX.MAPX
	WHERE MASPSD = XUATTK.MASPSD 
		AND MAKHO = XUATTK.MAKHO
		AND PX.DADUYET = 1
		AND PX.NGAY BETWEEN 
		(SELECT TUNGAY FROM DUOC.THOIGIANKHOASO WHERE NAMTHANG = XUATTK.NAMTHANG)
		AND (SELECT DENNGAY FROM DUOC.THOIGIANKHOASO WHERE NAMTHANG = XUATTK.NAMTHANG);
	IF (M_SOLUONG IS NULL) THEN
		RETURN 0;
	ELSE
		RETURN M_SOLUONG;
	END IF;
END F1;

CREATE OR REPLACE PROCEDURE DUOC.BAOCAONXT_INNEW 
(
IN TUNGAY CHAR(6),
IN DENNGAY CHAR(6),
IN LOAISPID CHAR(2)
)
	DYNAMIC RESULT SETS 1
P1: BEGIN
	-- Declare cursor
	DECLARE cursor1 CURSOR WITH RETURN for
	SELECT TENSP, TENDONVI, NHOMSPID, TENNHOMSP, DONGIA,
		SUM(SLDK) SLDK, 
		SUM(SLNHAP) SLNHAP, 
		SUM(SLXUAT) SLXUAT, 
		SUM(SLTRANCC) SLTRANCC,
		SUM(SLTHANHLY) SLTHANHLY, 
		SUM(SLCK) SLCK,
		SUM(STDK) STDK, 
		SUM(STNHAP) STNHAP, 
		SUM(STXUAT) STXUAT, 
		SUM(STTRANCC) STTRANCC,
		SUM(STTHANHLY) STTHANHLY, 
		SUM(STCK) STCK
	FROM
		(SELECT TK.MASPSD, SP.TENSP, SP.TENDONVI, SP.NHOMSPID, SP.TENNHOMSP,
		INTEGER(CTN.GIANHAP) DONGIA, 
		SUM(SLDK) SLDK, 
		SUM(SLNTK) AS SLNHAP, 
		SUM(SLXTK) SLXUAT, 
		SUM(SLTRANCC) SLTRANCC,
		SUM(SLTHANHLY) SLTHANHLY, 
		SUM(SLCK) AS SLCK,
		SUM(SLDK) * INTEGER(MAX(CTN.GIANHAP)) AS STDK, 
		SUM(SLNTK) * INTEGER(MAX(CTN.GIANHAP)) AS STNHAP, 
		SUM(SLXTK) * INTEGER(MAX(CTN.GIANHAP)) STXUAT, 
		SUM(SLTRANCC) * INTEGER(MAX(CTN.GIANHAP)) AS STTRANCC,
		SUM(SLTHANHLY) * INTEGER(MAX(CTN.GIANHAP)) AS STTHANHLY, 
		SUM(SLCK) * INTEGER(MAX(CTN.GIANHAP)) AS STCK
		FROM
		(
		--TON DAU KY
		SELECT TON.MASPSD, SOLUONG SLDK, 0 AS SLNTK, 0 AS SLXTK, 0 AS SLTRANCC, 0 AS SLTHANHLY, 0 AS SLCK
		FROM DUOC.SANPHAMTON TON
		JOIN DUOC.SANPHAMSD SD ON TON.MASPSD = SD.MASPSD
		JOIN DUOC.SANPHAM SP ON SD.MASP = SP.MASP
		JOIN DUOC.NHOMSP NH ON SP.NHOMSPID = NH.NHOMSPID
		WHERE NAMTHANG = DUOC.GETNAMTHANGTRUOC(BAOCAONXT_INNEW.TUNGAY) AND NH.LOAISPID = BAOCAONXT_INNEW.LOAISPID AND SOLUONG > 0
		
		UNION
		
		-- NHAP TRONG KY
		SELECT CT.MASPSD, 0 AS SLDK, SUM(CT.SOLUONG) AS SLNTK, 0 AS SLXTK, 0 AS SLTRANCC, 0 AS SLTHANHLY, 0 AS SLCK  
		FROM DUOC.CHITIETNHAP CT JOIN DUOC.PHIEUNHAP PN ON CT.MAPN = PN.MAPN
		JOIN DUOC.SANPHAMSD SD ON CT.MASPSD = SD.MASPSD
		JOIN DUOC.SANPHAM SP ON SD.MASP = SP.MASP
		JOIN DUOC.NHOMSP NH ON SP.NHOMSPID = NH.NHOMSPID
		WHERE TO_CHAR(NGAY, 'YYYYMM') >= BAOCAONXT_INNEW.TUNGAY AND TO_CHAR(NGAY, 'YYYYMM') <= BAOCAONXT_INNEW.DENNGAY
			AND NH.LOAISPID = BAOCAONXT_INNEW.LOAISPID
		GROUP BY CT.MASPSD
		
		UNION
		
		--XUAT TRONG KY
		SELECT CT.MASPSD, 0 AS SLDK, 0 AS SLNYK, SUM(CT.SOLUONG) AS SLXTK, 0 AS SLTRANCC, 0 AS SLTHANHLY, 0 AS SLCK  
		FROM DUOC.CHITIETXUAT CT JOIN DUOC.PHIEUXUAT PX ON CT.MAPX = PX.MAPX
		JOIN DUOC.SANPHAMSD SD ON CT.MASPSD = SD.MASPSD
		JOIN DUOC.SANPHAM SP ON SD.MASP = SP.MASP
		JOIN DUOC.NHOMSP NH ON SP.NHOMSPID = NH.NHOMSPID
		WHERE TO_CHAR(NGAY, 'YYYYMM') >= BAOCAONXT_INNEW.TUNGAY AND TO_CHAR(NGAY, 'YYYYMM') <= BAOCAONXT_INNEW.DENNGAY 
			AND NH.LOAISPID = BAOCAONXT_INNEW.LOAISPID
		GROUP BY CT.MASPSD
		
		UNION
		
		--TRA NCC
		SELECT CT.MASPSD, 0 AS SLDK, 0 AS SLNYK, 0 AS SLXTK, SOLUONG AS SLTRANCC, 0 AS SLTHANHLY, 0 AS SLCK 
		FROM DUOC.CHITIETTRANCC CT 
		JOIN DUOC.PHIEUTRANCC TRANCC ON CT.MAPTNCC = TRANCC.MAPTNCC
		JOIN DUOC.SANPHAMSD SD ON CT.MASPSD = SD.MASPSD
		JOIN DUOC.SANPHAM SP ON SD.MASP = SP.MASP
		JOIN DUOC.NHOMSP NH ON SP.NHOMSPID = NH.NHOMSPID
		WHERE TO_CHAR(NGAY, 'YYYYMM') >= BAOCAONXT_INNEW.TUNGAY AND TO_CHAR(NGAY, 'YYYYMM') <= BAOCAONXT_INNEW.DENNGAY 
			AND NH.LOAISPID = BAOCAONXT_INNEW.LOAISPID
		
		UNION 
		
		--THANH LY
		SELECT CT.MASPSD, 0 AS SLDK, 0 AS SLNYK, 0 AS SLXTK, SOLUONG AS SLTRANCC, SOLUONG AS SLTHANHLY, 0 AS SLCK 
		FROM DUOC.CHITIETTHANHLY CT 
		JOIN DUOC.PHIEUTHANHLY PTL ON CT.MATL = PTL.MATL
		JOIN DUOC.SANPHAMSD SD ON CT.MASPSD = SD.MASPSD
		JOIN DUOC.SANPHAM SP ON SD.MASP = SP.MASP
		JOIN DUOC.NHOMSP NH ON SP.NHOMSPID = NH.NHOMSPID
		WHERE TO_CHAR(NGAY, 'YYYYMM') >= BAOCAONXT_INNEW.TUNGAY AND TO_CHAR(NGAY, 'YYYYMM') <= BAOCAONXT_INNEW.DENNGAY 
		AND NH.LOAISPID = BAOCAONXT_INNEW.LOAISPID
							  
		UNION
		
		-- TON CUOI KY
		SELECT TON.MASPSD, 0 AS SLDK, 0 AS SLNTK, 0 AS SLXTK, 0 AS SLTRANCC, 0 AS SLTHANHLY, SOLUONG SLCK
		FROM DUOC.SANPHAMTON TON
		JOIN DUOC.SANPHAMSD SD ON TON.MASPSD = SD.MASPSD
		JOIN DUOC.SANPHAM SP ON SD.MASP = SP.MASP
		JOIN DUOC.NHOMSP NH ON SP.NHOMSPID = NH.NHOMSPID
		WHERE NAMTHANG = BAOCAONXT_INNEW.DENNGAY AND NH.LOAISPID = BAOCAONXT_INNEW.LOAISPID AND SOLUONG > 0
		
		) TK
		JOIN DUOC.CHITIETNHAP CTN ON TK.MASPSD = CTN.MASPSD
		JOIN DUOC.SANPHAMSD SD ON TK.MASPSD = SD.MASPSD
		JOIN DUOC.VIEWSANPHAM SP ON SD.MASP = SP.MASP
		GROUP BY TK.MASPSD, SP.TENSP, SP.TENDONVI, SP.NHOMSPID, SP.TENNHOMSP, CTN.GIANHAP) TH
	GROUP BY TENSP, TENDONVI, NHOMSPID, TENNHOMSP, DONGIA
	ORDER BY NHOMSPID, TENSP;


	OPEN cursor1;
END P1;

CREATE OR REPLACE PROCEDURE DUOC.BAOCAONXT_OUTNEW 
(
IN TUNGAY CHAR(6),
IN DENNGAY CHAR(6),
IN LOAISPID CHAR(2)
)
	DYNAMIC RESULT SETS 1
P1: BEGIN
	-- Declare cursor
	DECLARE cursor1 CURSOR WITH RETURN for
	SELECT TENSP, TENDONVI, NHOMSPID, TENNHOMSP, DONGIA,
		SUM(SLDK) SLDK, 
		SUM(SLNHAP) SLNHAP, 
		SUM(SLXUAT) SLXUAT, 
		SUM(SLTRANCC) SLTRANCC,
		SUM(SLTHANHLY) SLTHANHLY, 
		SUM(SLCK) SLCK,
		SUM(STDK) STDK, 
		SUM(STNHAP) STNHAP, 
		SUM(STXUAT) STXUAT, 
		SUM(STTRANCC) STTRANCC,
		SUM(STTHANHLY) STTHANHLY, 
		SUM(STCK) STCK
	FROM
		(SELECT TK.MASPSD, SP.TENSP, SP.TENDONVI, SP.NHOMSPID, SP.TENNHOMSP,
		INTEGER(CTN.GIAXUAT) DONGIA, 
		SUM(SLDK) SLDK, 
		SUM(SLNTK) AS SLNHAP, 
		SUM(SLXTK) SLXUAT, 
		SUM(SLTRANCC) SLTRANCC,
		SUM(SLTHANHLY) SLTHANHLY, 
		SUM(SLCK) AS SLCK,
		SUM(SLDK) * INTEGER(MAX(CTN.GIANHAP)) AS STDK, 
		SUM(SLNTK) * INTEGER(MAX(CTN.GIANHAP)) AS STNHAP, 
		SUM(SLXTK) * INTEGER(MAX(CTN.GIANHAP)) STXUAT, 
		SUM(SLTRANCC) * INTEGER(MAX(CTN.GIANHAP)) AS STTRANCC,
		SUM(SLTHANHLY) * INTEGER(MAX(CTN.GIANHAP)) AS STTHANHLY, 
		SUM(SLCK) * INTEGER(MAX(CTN.GIANHAP)) AS STCK
		FROM
		(
		--TON DAU KY
		SELECT TON.MASPSD, SOLUONG SLDK, 0 AS SLNTK, 0 AS SLXTK, 0 AS SLTRANCC, 0 AS SLTHANHLY, 0 AS SLCK
		FROM DUOC.SANPHAMTON TON
		JOIN DUOC.SANPHAMSD SD ON TON.MASPSD = SD.MASPSD
		JOIN DUOC.SANPHAM SP ON SD.MASP = SP.MASP
		JOIN DUOC.NHOMSP NH ON SP.NHOMSPID = NH.NHOMSPID
		WHERE NAMTHANG = DUOC.GETNAMTHANGTRUOC(BAOCAONXT_OUTNEW.TUNGAY) AND NH.LOAISPID = BAOCAONXT_OUTNEW.LOAISPID AND SOLUONG > 0
		
		UNION
		
		-- NHAP TRONG KY
		SELECT CT.MASPSD, 0 AS SLDK, SUM(CT.SOLUONG) AS SLNTK, 0 AS SLXTK, 0 AS SLTRANCC, 0 AS SLTHANHLY, 0 AS SLCK  
		FROM DUOC.CHITIETNHAP CT JOIN DUOC.PHIEUNHAP PN ON CT.MAPN = PN.MAPN
		JOIN DUOC.SANPHAMSD SD ON CT.MASPSD = SD.MASPSD
		JOIN DUOC.SANPHAM SP ON SD.MASP = SP.MASP
		JOIN DUOC.NHOMSP NH ON SP.NHOMSPID = NH.NHOMSPID
		WHERE TO_CHAR(NGAY, 'YYYYMM') >= BAOCAONXT_OUTNEW.TUNGAY AND TO_CHAR(NGAY, 'YYYYMM') <= BAOCAONXT_OUTNEW.DENNGAY
			AND NH.LOAISPID = BAOCAONXT_OUTNEW.LOAISPID
		GROUP BY CT.MASPSD
		
		UNION
		
		--XUAT TRONG KY
		SELECT CT.MASPSD, 0 AS SLDK, 0 AS SLNYK, SUM(CT.SOLUONG) AS SLXTK, 0 AS SLTRANCC, 0 AS SLTHANHLY, 0 AS SLCK  
		FROM DUOC.CHITIETXUAT CT JOIN DUOC.PHIEUXUAT PX ON CT.MAPX = PX.MAPX
		JOIN DUOC.SANPHAMSD SD ON CT.MASPSD = SD.MASPSD
		JOIN DUOC.SANPHAM SP ON SD.MASP = SP.MASP
		JOIN DUOC.NHOMSP NH ON SP.NHOMSPID = NH.NHOMSPID
		WHERE TO_CHAR(NGAY, 'YYYYMM') >= BAOCAONXT_OUTNEW.TUNGAY AND TO_CHAR(NGAY, 'YYYYMM') <= BAOCAONXT_OUTNEW.DENNGAY 
			AND NH.LOAISPID = BAOCAONXT_OUTNEW.LOAISPID
		GROUP BY CT.MASPSD
		
		UNION
		
		--TRA NCC
		SELECT CT.MASPSD, 0 AS SLDK, 0 AS SLNYK, 0 AS SLXTK, SOLUONG AS SLTRANCC, 0 AS SLTHANHLY, 0 AS SLCK 
		FROM DUOC.CHITIETTRANCC CT 
		JOIN DUOC.PHIEUTRANCC TRANCC ON CT.MAPTNCC = TRANCC.MAPTNCC
		JOIN DUOC.SANPHAMSD SD ON CT.MASPSD = SD.MASPSD
		JOIN DUOC.SANPHAM SP ON SD.MASP = SP.MASP
		JOIN DUOC.NHOMSP NH ON SP.NHOMSPID = NH.NHOMSPID
		WHERE TO_CHAR(NGAY, 'YYYYMM') >= BAOCAONXT_OUTNEW.TUNGAY AND TO_CHAR(NGAY, 'YYYYMM') <= BAOCAONXT_OUTNEW.DENNGAY 
			AND NH.LOAISPID = BAOCAONXT_OUTNEW.LOAISPID
		
		UNION 
		
		--THANH LY
		SELECT CT.MASPSD, 0 AS SLDK, 0 AS SLNYK, 0 AS SLXTK, SOLUONG AS SLTRANCC, SOLUONG AS SLTHANHLY, 0 AS SLCK 
		FROM DUOC.CHITIETTHANHLY CT 
		JOIN DUOC.PHIEUTHANHLY PTL ON CT.MATL = PTL.MATL
		JOIN DUOC.SANPHAMSD SD ON CT.MASPSD = SD.MASPSD
		JOIN DUOC.SANPHAM SP ON SD.MASP = SP.MASP
		JOIN DUOC.NHOMSP NH ON SP.NHOMSPID = NH.NHOMSPID
		WHERE TO_CHAR(NGAY, 'YYYYMM') >= BAOCAONXT_OUTNEW.TUNGAY AND TO_CHAR(NGAY, 'YYYYMM') <= BAOCAONXT_OUTNEW.DENNGAY 
		AND NH.LOAISPID = BAOCAONXT_OUTNEW.LOAISPID
							  
		UNION
		
		-- TON CUOI KY
		SELECT TON.MASPSD, 0 AS SLDK, 0 AS SLNTK, 0 AS SLXTK, 0 AS SLTRANCC, 0 AS SLTHANHLY, SOLUONG SLCK
		FROM DUOC.SANPHAMTON TON
		JOIN DUOC.SANPHAMSD SD ON TON.MASPSD = SD.MASPSD
		JOIN DUOC.SANPHAM SP ON SD.MASP = SP.MASP
		JOIN DUOC.NHOMSP NH ON SP.NHOMSPID = NH.NHOMSPID
		WHERE NAMTHANG = BAOCAONXT_OUTNEW.DENNGAY AND NH.LOAISPID = BAOCAONXT_OUTNEW.LOAISPID AND SOLUONG > 0
		
		) TK
		JOIN DUOC.CHITIETNHAP CTN ON TK.MASPSD = CTN.MASPSD
		JOIN DUOC.SANPHAMSD SD ON TK.MASPSD = SD.MASPSD
		JOIN DUOC.VIEWSANPHAM SP ON SD.MASP = SP.MASP
		GROUP BY TK.MASPSD, SP.TENSP, SP.TENDONVI, SP.NHOMSPID, SP.TENNHOMSP, CTN.GIAXUAT) TH
	GROUP BY TENSP, TENDONVI, NHOMSPID, TENNHOMSP, DONGIA
	ORDER BY NHOMSPID, TENSP;


	OPEN cursor1;
END P1;

CREATE OR REPLACE PROCEDURE DUOC.COPYDONTHUOC 
(
IN MAPX CHAR(10),
IN MABS CHAR(5),
IN MAKP CHAR(3)
) 
P1: BEGIN ATOMIC
	DECLARE M_MAPX CHAR(10);
	DECLARE M_MAKH CHAR(10);
	DECLARE M_MAKHO CHAR(2);
	DECLARE M_NGAY DATE;
	DECLARE M_CHANDOAN VARCHAR(200);
	DECLARE M_LOIDAN VARCHAR(300);
	
	SELECT MAKH, MAKHO, NGAY, CHANDOAN, LOIDAN INTO M_MAKH, M_MAKHO, M_NGAY, M_CHANDOAN, M_LOIDAN FROM DUOC.PHIEUXUAT WHERE MAPX = COPYDONTHUOC.MAPX;
	CALL DUOC.SAVEPHIEUXUAT(M_MAPX, M_MAKH, M_MAKHO, CURRENT DATE, COPYDONTHUOC.MABS, M_CHANDOAN, COPYDONTHUOC.MAKP, M_LOIDAN);
	
	FOR v_row AS SELECT * FROM DUOC.CHITIETXUAT WHERE MAPX = COPYDONTHUOC.MAPX
    DO	 	
    	CALL DUOC.SAVECHITIETXUAT 
		(
		M_MAPX,
		v_row.MASPSD,
		v_row.HANDUNG,
		v_row.SOLUONG,
		1,
		v_row.CACHDUNG
		);
	END FOR;
	
END P1;

CREATE OR REPLACE PROCEDURE DUOC.DELCHITIETNHAP 
(
IN MAPN CHAR(10),
IN MASP CHAR(10)
)
P1: BEGIN ATOMIC
	DECLARE M_MANCC CHAR(5);
	DECLARE M_NGUONSPID CHAR(2);
	DECLARE M_NAMTHANG CHAR(6);
	DECLARE M_MAKHO CHAR(2);
	DECLARE M_MASPSD CHAR(15);
	DECLARE M_HANDUNG CHAR(6);
	DECLARE M_SOLUONG FLOAT;
	
	SELECT TO_CHAR(NGAY, 'YYYYMM'), MANCC, NGUONSPID, MAKHO INTO M_NAMTHANG, M_MANCC, M_NGUONSPID, M_MAKHO FROM DUOC.PHIEUNHAP WHERE MAPN = DELCHITIETNHAP.MAPN;
	SELECT MASPSD, HANDUNG, SOLUONG INTO M_MASPSD, M_HANDUNG, M_SOLUONG FROM DUOC.CHITIETNHAP WHERE MAPN = DELCHITIETNHAP.MAPN AND MASP = DELCHITIETNHAP.MASP;
	IF (DUOC.CHECKKHOASONAM(M_NAMTHANG) = 1) THEN
		RETURN;
	END IF;
	DELETE FROM DUOC.CHITIETNHAP WHERE MAPN = DELCHITIETNHAP.MAPN AND MASP = DELCHITIETNHAP.MASP;
	CALL DUOC.SAVESANPHAMTON(M_NAMTHANG, M_MAKHO, M_MASPSD, M_HANDUNG, M_SOLUONG * (-1));
	CALL DUOC.SAVESANPHAMTONAO(M_NAMTHANG, M_MAKHO, M_MASPSD, M_HANDUNG, M_SOLUONG * (-1));
END P1;

CREATE OR REPLACE PROCEDURE DUOC.DELCHITIETTHANHLY 
(
IN MATL CHAR(10),
IN MASPSD CHAR(15),
IN HANDUNG CHAR(6),
IN SOLUONG FLOAT
)
P1: BEGIN ATOMIC
	DECLARE M_MANCC CHAR(5);
	DECLARE M_NGUONSPID CHAR(2);
	DECLARE M_NAMTHANG CHAR(6);
	DECLARE M_MAKHO CHAR(2);
	
	IF EXISTS(SELECT * FROM DUOC.PHIEUTHANHLY WHERE MATL = DELCHITIETTHANHLY.MATL AND DADUYET = 1) THEN
		RETURN;
	END IF;
	
	SELECT TO_CHAR(NGAY, 'YYYYMM'), MAKHO INTO M_NAMTHANG, M_MAKHO FROM DUOC.PHIEUTHANHLY WHERE MATL = DELCHITIETTHANHLY.MATL;
	SELECT MANCC, NGUONSPID INTO M_MANCC, M_NGUONSPID FROM DUOC.SANPHAMSD WHERE MASPSD = DELCHITIETTHANHLY.MASPSD;
	IF (DUOC.CHECKKHOASONAM(M_NAMTHANG) = 1) THEN
		RETURN;
	END IF;
	DELETE FROM DUOC.CHITIETTHANHLY WHERE MATL = DELCHITIETTHANHLY.MATL AND MASPSD = DELCHITIETTHANHLY.MASPSD;
	CALL DUOC.SAVESANPHAMTON(M_NAMTHANG, M_MAKHO, DELCHITIETTHANHLY.MASPSD, DELCHITIETTHANHLY.HANDUNG, DELCHITIETTHANHLY.SOLUONG);
END P1;

CREATE OR REPLACE PROCEDURE DUOC.DELCHITIETTRANCC 
(
IN MAPTNCC CHAR(10),
IN MASPSD CHAR(15),
IN HANDUNG CHAR(6),
IN SOLUONG FLOAT
)
P1: BEGIN ATOMIC
	DECLARE M_MANCC CHAR(5);
	DECLARE M_NGUONSPID CHAR(2);
	DECLARE M_NAMTHANG CHAR(6);
	DECLARE M_MAKHO CHAR(2);
	
	IF EXISTS(SELECT * FROM DUOC.PHIEUTRANCC WHERE MAPTNCC = DELCHITIETTRANCC.MAPTNCC AND DADUYET = 1) THEN
		RETURN;
	END IF;
	
	SELECT TO_CHAR(NGAY, 'YYYYMM'), MAKHO INTO M_NAMTHANG, M_MAKHO FROM DUOC.PHIEUTRANCC WHERE MAPTNCC = DELCHITIETTRANCC.MAPTNCC;
	SELECT MANCC, NGUONSPID INTO M_MANCC, M_NGUONSPID FROM DUOC.SANPHAMSD WHERE MASPSD = DELCHITIETTRANCC.MASPSD;
	IF (DUOC.CHECKKHOASONAM(M_NAMTHANG) = 1) THEN
		RETURN;
	END IF;
	DELETE FROM DUOC.CHITIETTRANCC WHERE MAPTNCC = DELCHITIETTRANCC.MAPTNCC AND MASPSD = DELCHITIETTRANCC.MASPSD;
	CALL DUOC.SAVESANPHAMTON(M_NAMTHANG, M_MAKHO, DELCHITIETTRANCC.MASPSD, DELCHITIETTRANCC.HANDUNG, DELCHITIETTRANCC.SOLUONG);
END P1;

CREATE OR REPLACE PROCEDURE DUOC.DELCHITIETXUAT 
(
IN XUATID CHAR(15),
IN XUATAO SMALLINT
)
P1: BEGIN ATOMIC
	DECLARE M_MANCC CHAR(5);
	DECLARE M_NGUONSPID CHAR(2);
	DECLARE M_NAMTHANG CHAR(6);
	DECLARE M_MAKHO CHAR(2);
	DECLARE M_MAPX CHAR(10);
	DECLARE M_MASPSD CHAR(15);
	DECLARE M_HANDUNG CHAR(6);
	DECLARE M_SOLUONG FLOAT;
	SELECT MAPX, MASPSD, HANDUNG, SOLUONG INTO M_MAPX, M_MASPSD, M_HANDUNG, M_SOLUONG FROM DUOC.CHITIETXUAT WHERE XUATID = DELCHITIETXUAT.XUATID;
	IF EXISTS(SELECT * FROM DUOC.PHIEUXUAT WHERE MAPX = M_MAPX AND DADUYET = 1) THEN
		RETURN;
	END IF;
	
	SELECT TO_CHAR(NGAY, 'YYYYMM'), MAKHO INTO M_NAMTHANG, M_MAKHO FROM DUOC.PHIEUXUAT WHERE MAPX = M_MAPX;
	SELECT MANCC, NGUONSPID INTO M_MANCC, M_NGUONSPID FROM DUOC.SANPHAMSD WHERE MASPSD = M_MASPSD;
	IF (DUOC.CHECKKHOASONAM(M_NAMTHANG) = 1) THEN
		RETURN;
	END IF;
	DELETE FROM DUOC.CHITIETXUAT WHERE XUATID = DELCHITIETXUAT.XUATID;
	IF (DELCHITIETXUAT.XUATAO = 1) THEN
		CALL DUOC.SAVESANPHAMTONAO(M_NAMTHANG, M_MAKHO, M_MASPSD, M_HANDUNG, M_SOLUONG);
	ELSE
		CALL DUOC.SAVESANPHAMTON(M_NAMTHANG, M_MAKHO, M_MASPSD, M_HANDUNG, M_SOLUONG);
	END IF;
END P1;

CREATE OR REPLACE PROCEDURE DUOC.DELDUOCTON 
(
IN NAMTHANG CHAR(6),
IN MAKHO CHAR(2),
IN MASPSD CHAR(15),
IN HANDUNG CHAR(6)
)
P1: BEGIN ATOMIC
	DELETE FROM DUOC.SANPHAMTON 
	WHERE NAMTHANG = DELDUOCTON.NAMTHANG AND MAKHO = DELDUOCTON.MAKHO AND MASPSD = DELDUOCTON.MASPSD AND HANDUNG = DELDUOCTON.HANDUNG;
	DELETE FROM DUOC.SANPHAMSD WHERE MASPSD =  DELDUOCTON.MASPSD;
END P1;

CREATE OR REPLACE PROCEDURE DUOC.DUYETPHIEUXUAT 
(
IN MAPX CHAR(10)
) 
P1: BEGIN ATOMIC
	DECLARE M_NAMTHANG CHAR(6);
	DECLARE M_MAKHO CHAR(2);
	DECLARE M_SOLUONG SMALLINT;
	DECLARE M_MASPSD CHAR(15);
	DECLARE M_HANDUNG CHAR(6);
	SELECT TO_CHAR(NGAY, 'YYYYMM'), MAKHO INTO M_NAMTHANG, M_MAKHO FROM DUOC.PHIEUXUAT WHERE MAPX = DUYETPHIEUXUAT.MAPX;
	
	FOR R AS SELECT SOLUONG, MASPSD, HANDUNG	                               -- (1)
    FROM DUOC.CHITIETXUAT
    WHERE MAPX = DUYETPHIEUXUAT.MAPX	 	 
    DO	 	 	 
		CALL DUOC.SAVESANPHAMTON(M_NAMTHANG, M_MAKHO, R.MASPSD, R.HANDUNG, R.SOLUONG * (-1));
	END FOR	;
	
END P1;

CREATE OR REPLACE PROCEDURE DUOC.KHAIBAODUOCTON 
(
IN MAKHO CHAR(2),
IN MANCC CHAR(5),
IN NGUONSPID CHAR(2),
IN NAMTHANG CHAR(6),
IN MASP CHAR(10),
IN HANDUNG CHAR(6),
IN SOLUONG FLOAT,
IN GIAXUAT FLOAT
)
P1: BEGIN ATOMIC
	DECLARE SQLCODE INT;
	DECLARE M_MASPSD CHAR(15);
	SELECT MASPSD INTO M_MASPSD FROM DUOC.SANPHAMSD WHERE MASP = KHAIBAODUOCTON.MASP AND ROUND(GIAXUAT,0) = ROUND(KHAIBAODUOCTON.GIAXUAT,0);
	IF (M_MASPSD IS NULL OR M_MASPSD = '') THEN
		CALL DUOC.SAVESANPHAMSD(M_MASPSD, KHAIBAODUOCTON.MASP, KHAIBAODUOCTON.NGUONSPID, KHAIBAODUOCTON.MANCC, KHAIBAODUOCTON.GIAXUAT);
	END IF;
	INSERT INTO DUOC.SANPHAMTON (NAMTHANG, MAKHO, MASPSD, HANDUNG, SOLUONG) 
	VALUES (KHAIBAODUOCTON.NAMTHANG, KHAIBAODUOCTON.MAKHO, M_MASPSD, KHAIBAODUOCTON.HANDUNG, KHAIBAODUOCTON.SOLUONG);		
END P1;

CREATE OR REPLACE PROCEDURE DUOC.KHAIBAODUOCTON 
(
IN MAKHO CHAR(2),
IN MANCC CHAR(5),
IN NGUONSPID CHAR(2),
IN NAMTHANG CHAR(6),
IN MASP CHAR(10),
IN HANDUNG CHAR(6),
IN SOLUONG FLOAT,
IN GIAXUAT FLOAT,
IN GIANHAP FLOAT
)
P1: BEGIN ATOMIC
	DECLARE SQLCODE INT;
	DECLARE M_MASPSD CHAR(15);
	
	/*
	SELECT MASPSD INTO M_MASPSD 
	FROM DUOC.SANPHAMSD 
	WHERE MASP = KHAIBAODUOCTON.MASP 
		AND ROUND(GIAXUAT,0) = ROUND(KHAIBAODUOCTON.GIAXUAT,0)
		AND ROUND(GIANHAP,0) = ROUND(KHAIBAODUOCTON.GIANHAP,0);
	*/
	SET KHAIBAODUOCTON.MANCC = '00000';
	
	CALL DUOC.SAVESANPHAMSD(M_MASPSD, KHAIBAODUOCTON.MASP, KHAIBAODUOCTON.NGUONSPID, KHAIBAODUOCTON.MANCC, KHAIBAODUOCTON.GIAXUAT, KHAIBAODUOCTON.GIANHAP);

	INSERT INTO DUOC.SANPHAMTON (NAMTHANG, MAKHO, MASPSD, HANDUNG, SOLUONG, SOLUONGAO) 
	VALUES (KHAIBAODUOCTON.NAMTHANG, KHAIBAODUOCTON.MAKHO, M_MASPSD, KHAIBAODUOCTON.HANDUNG, KHAIBAODUOCTON.SOLUONG, KHAIBAODUOCTON.SOLUONG);
	
	/*
	UPDATE DUOC.SANPHAMTON
	SET SOLUONG = SOLUONG + KHAIBAODUOCTON.SOLUONG
	WHERE NAMTHANG = '201509'
		AND MAKHO = KHAIBAODUOCTON.MAKHO
		AND MASPSD = M_MASPSD
		AND HANDUNG = KHAIBAODUOCTON.HANDUNG;
		
	IF (SQLCODE != 0) THEN	
		INSERT INTO DUOC.SANPHAMTON (NAMTHANG, MAKHO, MASPSD, HANDUNG, SOLUONG) 
		VALUES ('201509', KHAIBAODUOCTON.MAKHO, M_MASPSD, KHAIBAODUOCTON.HANDUNG, KHAIBAODUOCTON.SOLUONG);		
	END IF;
	*/
END P1;

CREATE OR REPLACE PROCEDURE DUOC.LISTCHITIETNHAP 
(
IN MAPN CHAR(10)
)
DYNAMIC RESULT SETS 1
------------------------------------------------------------------------
-- SQL Stored Procedure 
------------------------------------------------------------------------
P1: BEGIN
	-- Declare cursor
	DECLARE cursor1 CURSOR WITH RETURN FOR
		SELECT CT.MASP, 
			CT.MASPSD, 
			SP.TENSP, 
			SP.HOATCHAT,
			SP.TENDONVI, 
			SP.HANGSX,
			CT.SOLO, 
			SUBSTR(HANDUNG, 5,2) || '-' || SUBSTR(HANDUNG, 1, 4) AS HANDUNG, 
			CT.SOLUONG, 
			CT.GIANHAP, 
			CT.GIAXUAT, 
			CT.VAT, 
			--CT.SOLUONG * CT.GIANHAP AS THANHTIEN, 
			CT.SOLUONG * CT.GIANHAP + (CT.SOLUONG * CT.GIANHAP * (CASE WHEN CHIETKHAU = 0 THEN 0 ELSE 1 - CHIETKHAU END) /100) AS THANHTIEN, 
			CT.SOLUONG * CT.GIANHAP * (CASE WHEN CHIETKHAU = 0 THEN 0 ELSE CHIETKHAU/100 END) AS TIENCHIETKHAU, 
			CHIETKHAU, 
			SP.NHOMSPID, 
			SP.TENNHOMSP
		FROM DUOC.CHITIETNHAP CT
 			JOIN DUOC.VIEWSANPHAM SP ON CT.MASP = SP.MASP 
 		WHERE CT.MAPN = LISTCHITIETNHAP.MAPN
 		--ORDER BY SP.NHOMSPID, SP.TENSP;
 		ORDER BY STT;

	-- Cursor left open for client application
	OPEN cursor1;
END P1;

CREATE OR REPLACE PROCEDURE DUOC.LISTCHITIETXUAT 
(
IN MAPX CHAR(10)
)
DYNAMIC RESULT SETS 1
------------------------------------------------------------------------
-- SQL Stored Procedure 
------------------------------------------------------------------------
P1: BEGIN
	-- Declare cursor
	DECLARE cursor1 CURSOR WITH RETURN FOR
		SELECT CT.XUATID, 
			CT.MASPSD, 
			SP.TENSP, 
			SP.TENDONVI, 
			CT.HANDUNG, 
			SUBSTR(HANDUNG, 5,2) || '-' || SUBSTR(HANDUNG, 1, 4) AS THANGNAMHANDUNG, 
			CT.SOLUONG, 
			CT.GIAXUAT, 
			CT.SOLUONG * CT.GIAXUAT AS THANHTIEN,
			CT.CACHDUNG
		FROM DUOC.CHITIETXUAT CT
			JOIN DUOC.SANPHAMSD SD ON CT.MASPSD = SD.MASPSD 
 			JOIN DUOC.VIEWSANPHAM SP ON SD.MASP = SP.MASP
 		WHERE MAPX = LISTCHITIETXUAT.MAPX;

	-- Cursor left open for client application
	OPEN cursor1;
END P1;

CREATE OR REPLACE PROCEDURE DUOC.SAVECHITIETNHAP 
(
IN MAPN CHAR(10),
IN MASP CHAR(10),
IN QUICACHID CHAR(3),
IN SODANGKY VARCHAR(30),
IN SOLO VARCHAR(30),
IN HANDUNG CHAR(6),
IN SOLUONGQUICACH FLOAT,
IN SOLUONGQUIDOI SMALLINT,
IN DONGIAQUICACH FLOAT,
IN VAT FLOAT,
IN SOLUONG FLOAT,
IN GIANHAP FLOAT,
IN GIAXUAT FLOAT,
IN CHIETKHAU FLOAT
)
P1: BEGIN ATOMIC
	DECLARE SQLCODE INT;
	DECLARE M_MANCC CHAR(5);
	DECLARE M_NGUONSPID CHAR(2);
	DECLARE M_NAMTHANG CHAR(6);
	DECLARE M_MASPSD CHAR(15);
	DECLARE M_MAKHO CHAR(2);
	DECLARE M_STT SMALLINT;
	DECLARE M_GIAXUAT FLOAT;
	DECLARE M_TYLE SMALLINT;
	select tyle INTO M_TYLE from duoc.giaban where ROUND(SAVECHITIETNHAP.GIANHAP,0) between giathap and giacao;
	SET M_GIAXUAT = SAVECHITIETNHAP.GIANHAP * (1 + M_TYLE/100.0);
	
	SELECT TO_CHAR(NGAY, 'YYYYMM'), MANCC, NGUONSPID, MAKHO INTO M_NAMTHANG, M_MANCC, M_NGUONSPID, M_MAKHO FROM DUOC.PHIEUNHAP WHERE MAPN = SAVECHITIETNHAP.MAPN;
	IF (DUOC.CHECKKHOASONAM(M_NAMTHANG) = 1) THEN
		RETURN;
	END IF;
	SELECT MAX(STT) INTO M_STT FROM DUOC.CHITIETNHAP WHERE MAPN = SAVECHITIETNHAP.MAPN AND MASP = SAVECHITIETNHAP.MASP;
	IF (M_STT IS NULL) THEN
		SET M_STT = 1;
	ELSE
		SET M_STT = M_STT + 1;
	END IF; 
	CALL DUOC.SAVESANPHAMSD(M_MASPSD, SAVECHITIETNHAP.MASP, M_NGUONSPID, M_MANCC, M_GIAXUAT, SAVECHITIETNHAP.GIANHAP);

	INSERT INTO DUOC.CHITIETNHAP (MAPN, MASP, MASPSD, QUICACHID, SODANGKY, SOLO, HANDUNG, SOLUONGQUICACH, SOLUONGQUIDOI, DONGIAQUICACH, VAT, SOLUONG, GIANHAP, GIAXUAT, CHIETKHAU, STT)
	VALUES (SAVECHITIETNHAP.MAPN, SAVECHITIETNHAP.MASP, M_MASPSD, SAVECHITIETNHAP.QUICACHID, SAVECHITIETNHAP.SODANGKY, SAVECHITIETNHAP.SOLO, SAVECHITIETNHAP.HANDUNG, SAVECHITIETNHAP.SOLUONGQUICACH, SAVECHITIETNHAP.SOLUONGQUIDOI, SAVECHITIETNHAP.DONGIAQUICACH, SAVECHITIETNHAP.VAT, SAVECHITIETNHAP.SOLUONG, SAVECHITIETNHAP.GIANHAP, M_GIAXUAT, SAVECHITIETNHAP.CHIETKHAU, M_STT);

	CALL DUOC.SAVESANPHAMTON(M_NAMTHANG, M_MAKHO, M_MASPSD, SAVECHITIETNHAP.HANDUNG, SAVECHITIETNHAP.SOLUONG);
END P1;

CREATE OR REPLACE PROCEDURE DUOC.SAVECHITIETTHANHLY 
(
IN MATL CHAR(10),
IN MASPSD CHAR(15),
IN HANDUNG CHAR(6),
IN SOLUONG FLOAT
)
P1: BEGIN ATOMIC
	DECLARE M_MANCC CHAR(5);
	DECLARE M_NGUONSPID CHAR(2);
	DECLARE M_NAMTHANG CHAR(6);
	DECLARE M_MAKHO CHAR(2);
	DECLARE M_GIAXUAT FLOAT;
	SELECT TO_CHAR(NGAY, 'YYYYMM'), MAKHO INTO M_NAMTHANG, M_MAKHO FROM DUOC.PHIEUTHANHLY WHERE MATL = SAVECHITIETTHANHLY.MATL;
	SELECT MANCC, NGUONSPID, GIAXUAT INTO M_MANCC, M_NGUONSPID, M_GIAXUAT FROM DUOC.SANPHAMSD WHERE MASPSD = SAVECHITIETTHANHLY.MASPSD;
	IF (DUOC.CHECKKHOASONAM(M_NAMTHANG) = 1) THEN
		RETURN;
	END IF;

	INSERT INTO DUOC.CHITIETTHANHLY(MATL, MASPSD, HANDUNG, SOLUONG)
	VALUES (SAVECHITIETTHANHLY.MATL, SAVECHITIETTHANHLY.MASPSD, SAVECHITIETTHANHLY.HANDUNG, SAVECHITIETTHANHLY.SOLUONG);

	CALL DUOC.SAVESANPHAMTON(M_NAMTHANG, M_MAKHO, SAVECHITIETTHANHLY.MASPSD, SAVECHITIETTHANHLY.HANDUNG, SAVECHITIETTHANHLY.SOLUONG * (-1));
END P1;

CREATE OR REPLACE PROCEDURE DUOC.SAVECHITIETTRANCC 
(
IN MAPTNCC CHAR(10),
IN MASPSD CHAR(15),
IN HANDUNG CHAR(6),
IN SOLUONG FLOAT
)
P1: BEGIN ATOMIC
	DECLARE M_MANCC CHAR(5);
	DECLARE M_NGUONSPID CHAR(2);
	DECLARE M_NAMTHANG CHAR(6);
	DECLARE M_MAKHO CHAR(2);
	SELECT TO_CHAR(NGAY, 'YYYYMM'), MAKHO INTO M_NAMTHANG, M_MAKHO FROM DUOC.PHIEUTRANCC WHERE MAPTNCC = SAVECHITIETTRANCC.MAPTNCC;
	SELECT MANCC, NGUONSPID INTO M_MANCC, M_NGUONSPID FROM DUOC.SANPHAMSD WHERE MASPSD = SAVECHITIETTRANCC.MASPSD;
	IF (DUOC.CHECKKHOASONAM(M_NAMTHANG) = 1) THEN
		RETURN;
	END IF;

	INSERT INTO DUOC.CHITIETTRANCC(MAPTNCC, MASPSD, HANDUNG, SOLUONG)
	VALUES (SAVECHITIETTRANCC.MAPTNCC, SAVECHITIETTRANCC.MASPSD, SAVECHITIETTRANCC.HANDUNG, SAVECHITIETTRANCC.SOLUONG);

	CALL DUOC.SAVESANPHAMTON(M_NAMTHANG, M_MAKHO, SAVECHITIETTRANCC.MASPSD, SAVECHITIETTRANCC.HANDUNG, SAVECHITIETTRANCC.SOLUONG * (-1));
END P1;

CREATE OR REPLACE PROCEDURE DUOC.SAVECHITIETXUAT 
(
IN MAPX CHAR(10),
IN MASPSD CHAR(15),
IN HANDUNG CHAR(6),
IN SOLUONG SMALLINT,
IN XUATAO SMALLINT,
IN CACHDUNG VARCHAR(200)
)
P1: BEGIN ATOMIC
	DECLARE M_XUATID CHAR(15);
	DECLARE M_MANCC CHAR(5);
	DECLARE M_NGUONSPID CHAR(2);
	DECLARE M_NAMTHANG CHAR(6);
	DECLARE M_MAKHO CHAR(2);
	DECLARE M_GIAXUAT FLOAT;
	SELECT TO_CHAR(NGAY, 'YYYYMM'), MAKHO INTO M_NAMTHANG, M_MAKHO FROM DUOC.PHIEUXUAT WHERE MAPX = SAVECHITIETXUAT.MAPX;
	SELECT MANCC, NGUONSPID, GIAXUAT INTO M_MANCC, M_NGUONSPID, M_GIAXUAT FROM DUOC.SANPHAMSD WHERE MASPSD = SAVECHITIETXUAT.MASPSD;
	IF (DUOC.CHECKKHOASONAM(M_NAMTHANG) = 1) THEN
		RETURN;
	END IF;
	IF EXISTS(SELECT * FROM DUOC.PHIEUXUAT WHERE MAPX = SAVECHITIETXUAT.MAPX AND DADUYET = 1) THEN
		RETURN;
	END IF;
	IF EXISTS(SELECT * FROM DUOC.CHITIETXUAT WHERE MASPSD = SAVECHITIETXUAT.MASPSD AND MAPX = SAVECHITIETXUAT.MAPX) THEN
		RETURN;
	END IF;
	
	SELECT MAX(XUATID) INTO M_XUATID FROM DUOC.CHITIETXUAT WHERE LEFT(MAPX,10) = SAVECHITIETXUAT.MAPX; 
	IF M_XUATID IS NULL OR M_XUATID = '' THEN
	   	SET M_XUATID = SAVECHITIETXUAT.MAPX || '00001';
	ELSE
		SET M_XUATID = LTRIM(CAST(M_XUATID AS BIGINT) + 1);
	END IF;
	INSERT INTO DUOC.CHITIETXUAT(MAPX, MASPSD, HANDUNG, SOLUONG, GIAXUAT, XUATID, CACHDUNG)
	VALUES (SAVECHITIETXUAT.MAPX, SAVECHITIETXUAT.MASPSD, SAVECHITIETXUAT.HANDUNG, SAVECHITIETXUAT.SOLUONG, M_GIAXUAT, M_XUATID, SAVECHITIETXUAT.CACHDUNG);
	IF (SAVECHITIETXUAT.XUATAO = 1) THEN
		CALL DUOC.SAVESANPHAMTONAO(M_NAMTHANG, M_MAKHO, SAVECHITIETXUAT.MASPSD, SAVECHITIETXUAT.HANDUNG, SAVECHITIETXUAT.SOLUONG * (-1));	
	ELSE
		CALL DUOC.SAVESANPHAMTON(M_NAMTHANG, M_MAKHO, SAVECHITIETXUAT.MASPSD, SAVECHITIETXUAT.HANDUNG, SAVECHITIETXUAT.SOLUONG * (-1));
	END IF;
END P1;

CREATE OR REPLACE PROCEDURE DUOC.SAVEDONVI 
(
INOUT DONVIID CHAR(3),
IN TENDONVI VARCHAR(50)
)
P1: BEGIN ATOMIC
	DECLARE SQLCODE INT;
	UPDATE DUOC.DONVI
	SET TENDONVI = SAVEDONVI.TENDONVI
	WHERE DONVIID = SAVEDONVI.DONVIID;
	IF (SQLCODE != 0) THEN
		SELECT MAX(DONVIID) INTO SAVEDONVI.DONVIID FROM DUOC.DONVI;
		IF (SAVEDONVI.DONVIID IS NULL OR SAVEDONVI.DONVIID = '') THEN
			SET SAVEDONVI.DONVIID = '001';
		ELSE
			SET SAVEDONVI.DONVIID = RIGHT('00' || LTRIM(CAST(SAVEDONVI.DONVIID AS SMALLINT) + 1), 3);
		END IF;		
		INSERT INTO DUOC.DONVI (DONVIID, TENDONVI) VALUES (SAVEDONVI.DONVIID, SAVEDONVI.TENDONVI);		
	END IF;
END P1;

CREATE OR REPLACE PROCEDURE DUOC.SAVEKHACHHANG 
(
INOUT MAKH CHAR(10),
IN TENKH VARCHAR(50),
IN DIACHI VARCHAR(100),
IN DIENTHOAI VARCHAR(50),
IN HIEULUC SMALLINT,
IN NAMSINH SMALLINT,
IN GIOITINH SMALLINT
)
P1: BEGIN ATOMIC
	DECLARE SQLCODE INT;	
	DECLARE M_NAM CHAR(2);
	SET M_NAM = TO_CHAR(CURRENT DATE, 'YY');
	UPDATE DUOC.KHACHHANG
	SET TENKH = SAVEKHACHHANG.TENKH,
		DIACHI = SAVEKHACHHANG.DIACHI,
		DIENTHOAI = SAVEKHACHHANG.DIENTHOAI,
		HIEULUC = SAVEKHACHHANG.HIEULUC,
		NAMSINH = SAVEKHACHHANG.NAMSINH,
		GIOITINH = SAVEKHACHHANG.GIOITINH
	WHERE MAKH = SAVEKHACHHANG.MAKH;
	IF (SQLCODE != 0) THEN
		/* SELECT MAX(MAKH) INTO SAVEKHACHHANG.MAKH FROM DUOC.KHACHHANG WHERE LEFT(MAKH, 2) = M_NAM;
		IF (SAVEKHACHHANG.MAKH IS NULL OR SAVEKHACHHANG.MAKH = '') THEN
			SET SAVEKHACHHANG.MAKH = M_NAM || '00000001';
		ELSE
			SET SAVEKHACHHANG.MAKH = LTRIM(CAST(SAVEKHACHHANG.MAKH AS BIGINT) + 1);
		END IF;
		*/		
		IF (SAVEKHACHHANG.MAKH = '') THEN RETURN; END IF;
		INSERT INTO DUOC.KHACHHANG (MAKH, TENKH, DIACHI, DIENTHOAI, HIEULUC, NAMSINH, GIOITINH) 
		VALUES (SAVEKHACHHANG.MAKH, SAVEKHACHHANG.TENKH, SAVEKHACHHANG.DIACHI, SAVEKHACHHANG.DIENTHOAI, SAVEKHACHHANG.HIEULUC, SAVEKHACHHANG.NAMSINH, SAVEKHACHHANG.GIOITINH);		
	END IF;
END P1;

CREATE OR REPLACE PROCEDURE DUOC.SAVEKHO 
(
INOUT MAKHO CHAR(2),
IN TENKHO VARCHAR(50),
IN HIEULUC SMALLINT
)
P1: BEGIN ATOMIC
	DECLARE SQLCODE INT;
	UPDATE DUOC.KHO
	SET TENKHO = SAVEKHO.TENKHO,
		HIEULUC = SAVEKHO.HIEULUC
	WHERE MAKHO = SAVEKHO.MAKHO;
	IF (SQLCODE != 0) THEN
		SELECT MAX(MAKHO) INTO SAVEKHO.MAKHO FROM DUOC.KHO;
		IF (SAVEKHO.MAKHO IS NULL OR SAVEKHO.MAKHO = '') THEN
			SET SAVEKHO.MAKHO = '01';
		ELSE
			SET SAVEKHO.MAKHO = RIGHT('0' || LTRIM(CAST(SAVEKHO.MAKHO AS SMALLINT) + 1), 2);
		END IF;		
		INSERT INTO DUOC.KHO (MAKHO, TENKHO, HIEULUC) VALUES (SAVEKHO.MAKHO, SAVEKHO.TENKHO, SAVEKHO.HIEULUC);		
	END IF;
END P1;

CREATE OR REPLACE PROCEDURE DUOC.SAVELOAISP 
(
INOUT LOAISPID CHAR(2),
IN TENLOAISP VARCHAR(50)
)
P1: BEGIN ATOMIC
	DECLARE SQLCODE INT;
	UPDATE DUOC.LOAISP
	SET TENLOAISP = SAVELOAISP.TENLOAISP
	WHERE LOAISPID = SAVELOAISP.LOAISPID;
	IF (SQLCODE != 0) THEN
		SELECT MAX(LOAISPID) INTO SAVELOAISP.LOAISPID FROM DUOC.LOAISP;
		IF (SAVELOAISP.LOAISPID IS NULL OR SAVELOAISP.LOAISPID = '') THEN
			SET SAVELOAISP.LOAISPID = '01';
		ELSE
			SET SAVELOAISP.LOAISPID = RIGHT('0' || LTRIM(CAST(SAVELOAISP.LOAISPID AS SMALLINT) + 1), 2);
		END IF;		
		INSERT INTO DUOC.LOAISP (LOAISPID, TENLOAISP) VALUES (SAVELOAISP.LOAISPID, SAVELOAISP.TENLOAISP);		
	END IF;
END P1;

CREATE OR REPLACE PROCEDURE DUOC.SAVELOAITHANHLY 
(
INOUT LOAITLID CHAR(2),
IN TENLOAITL VARCHAR(50)
)
P1: BEGIN ATOMIC
	DECLARE SQLCODE INT;
	UPDATE DUOC.LOAITHANHLY
	SET TENLOAITL = SAVELOAITHANHLY.TENLOAITL
	WHERE LOAITLID = SAVELOAITHANHLY.LOAITLID;
	IF (SQLCODE != 0) THEN
		SELECT MAX(LOAITLID) INTO SAVELOAITHANHLY.LOAITLID FROM DUOC.LOAITHANHLY;
		IF (SAVELOAITHANHLY.LOAITLID IS NULL OR SAVELOAITHANHLY.LOAITLID = '') THEN
			SET SAVELOAITHANHLY.LOAITLID = '01';
		ELSE
			SET SAVELOAITHANHLY.LOAITLID = RIGHT('0' || LTRIM(CAST(SAVELOAITHANHLY.LOAITLID AS SMALLINT) + 1), 2);
		END IF;		
		INSERT INTO DUOC.LOAITHANHLY (LOAITLID, TENLOAITL) VALUES (SAVELOAITHANHLY.LOAITLID, SAVELOAITHANHLY.TENLOAITL);		
	END IF;
END P1;

CREATE OR REPLACE PROCEDURE DUOC.SAVENGUOIDUNG 
(
IN TENDANGNHAP CHAR(50),
IN MATKHAU CHAR(50),
IN HOTEN VARCHAR(50)
)
P1: BEGIN ATOMIC
	DECLARE SQLCODE INT;
	UPDATE DUOC.NGUOIDUNG
	SET MATKHAU = SAVENGUOIDUNG.MATKHAU,
		HOTEN = SAVENGUOIDUNG.HOTEN
	WHERE TENDANGNHAP = SAVENGUOIDUNG.TENDANGNHAP;
	IF (SQLCODE != 0) THEN
		INSERT INTO DUOC.NGUOIDUNG(TENDANGNHAP, MATKHAU, HOTEN)
		VALUES(SAVENGUOIDUNG.TENDANGNHAP, SAVENGUOIDUNG.MATKHAU, SAVENGUOIDUNG.HOTEN);
	END IF; 
END P1;

CREATE OR REPLACE PROCEDURE DUOC.SAVENGUONSP 
(
INOUT NGUONSPID CHAR(2),
IN TENNGUONSP VARCHAR(50)
)
P1: BEGIN ATOMIC
	DECLARE SQLCODE INT;
	UPDATE DUOC.NGUONSP
	SET TENNGUONSP = SAVENGUONSP.TENNGUONSP
	WHERE NGUONSPID = SAVENGUONSP.NGUONSPID;
	IF (SQLCODE != 0) THEN
		SELECT MAX(NGUONSPID) INTO SAVENGUONSP.NGUONSPID FROM DUOC.NGUONSP;
		IF (SAVENGUONSP.NGUONSPID IS NULL OR SAVENGUONSP.NGUONSPID = '') THEN
			SET SAVENGUONSP.NGUONSPID = '01';
		ELSE
			SET SAVENGUONSP.NGUONSPID = RIGHT('0' || LTRIM(CAST(SAVENGUONSP.NGUONSPID AS SMALLINT) + 1), 2);
		END IF;		
		INSERT INTO DUOC.NGUONSP (NGUONSPID, TENNGUONSP) VALUES (SAVENGUONSP.NGUONSPID, SAVENGUONSP.TENNGUONSP);		
	END IF;
END P1;

CREATE OR REPLACE PROCEDURE DUOC.SAVENHACUNGCAP 
(
INOUT MANCC CHAR(5),
IN TENNCC VARCHAR(50),
IN DIACHI VARCHAR(100),
IN SOTAIKHOAN VARCHAR(20),
IN DIENTHOAI VARCHAR(20)
)
P1: BEGIN ATOMIC
	DECLARE SQLCODE INT;
	UPDATE DUOC.NHACUNGCAP
	SET TENNCC = SAVENHACUNGCAP.TENNCC,
		DIACHI = SAVENHACUNGCAP.DIACHI,
		SOTAIKHOAN = SAVENHACUNGCAP.SOTAIKHOAN,
		DIENTHOAI = SAVENHACUNGCAP.DIENTHOAI
	WHERE MANCC = SAVENHACUNGCAP.MANCC;
	IF (SQLCODE != 0) THEN
		SELECT MAX(MANCC) INTO SAVENHACUNGCAP.MANCC FROM DUOC.NHACUNGCAP;
		IF (SAVENHACUNGCAP.MANCC IS NULL OR SAVENHACUNGCAP.MANCC = '') THEN
			SET SAVENHACUNGCAP.MANCC = '00001';
		ELSE
			SET SAVENHACUNGCAP.MANCC = RIGHT('0000' || LTRIM(CAST(SAVENHACUNGCAP.MANCC AS BIGINT) + 1), 5);
		END IF;		
		INSERT INTO DUOC.NHACUNGCAP (MANCC, TENNCC, DIACHI, SOTAIKHOAN, DIENTHOAI) 
		VALUES (SAVENHACUNGCAP.MANCC, SAVENHACUNGCAP.TENNCC, SAVENHACUNGCAP.DIACHI, SAVENHACUNGCAP.SOTAIKHOAN, SAVENHACUNGCAP.DIENTHOAI);		
	END IF;
END P1;

CREATE OR REPLACE PROCEDURE DUOC.SAVENHOMSP 
(
INOUT NHOMSPID CHAR(5),
IN LOAISPID CHAR(2),
IN TENNHOMSP VARCHAR(100)
)
P1: BEGIN ATOMIC
	DECLARE SQLCODE INT;
	UPDATE DUOC.NHOMSP
	SET LOAISPID = SAVENHOMSP.LOAISPID,
		TENNHOMSP = SAVENHOMSP.TENNHOMSP
	WHERE NHOMSPID = SAVENHOMSP.NHOMSPID;
	IF (SQLCODE != 0) THEN
		SELECT MAX(NHOMSPID) INTO SAVENHOMSP.NHOMSPID FROM DUOC.NHOMSP WHERE LEFT(NHOMSPID, 2) = SAVENHOMSP.LOAISPID;
		IF (SAVENHOMSP.NHOMSPID IS NULL OR SAVENHOMSP.NHOMSPID = '') THEN
			SET SAVENHOMSP.NHOMSPID = SAVENHOMSP.LOAISPID || '001';
		ELSE
			SET SAVENHOMSP.NHOMSPID = RIGHT('00' || LTRIM(CAST(SAVENHOMSP.NHOMSPID AS BIGINT) + 1), 5);
		END IF;		
		INSERT INTO DUOC.NHOMSP (NHOMSPID, LOAISPID, TENNHOMSP) VALUES (SAVENHOMSP.NHOMSPID, SAVENHOMSP.LOAISPID, SAVENHOMSP.TENNHOMSP);		
	END IF;
END P1;

CREATE OR REPLACE PROCEDURE DUOC.SAVEPHIEUNHAP 
(
INOUT MAPN CHAR(10),
IN MANCC CHAR(5),
IN NGUONSPID CHAR(2),
IN MAKHO CHAR(2),
IN NGAY DATE,
IN SOHD VARCHAR(30),
IN NGAYHD DATE,
IN CHIETKHAU FLOAT
)
P1: BEGIN ATOMIC
	DECLARE SQLCODE INT;

	IF (DUOC.CHECKKHOASONAM(TO_CHAR(SAVEPHIEUNHAP.NGAY, 'YYYYMM')) = 1) THEN
		RETURN;
	END IF;

	UPDATE DUOC.PHIEUNHAP
	SET MANCC = SAVEPHIEUNHAP.MANCC,
		NGUONSPID = SAVEPHIEUNHAP.NGUONSPID,
		MAKHO = SAVEPHIEUNHAP.MAKHO,
		NGAY = SAVEPHIEUNHAP.NGAY,
		SOHD = SAVEPHIEUNHAP.SOHD,
		NGAYHD = SAVEPHIEUNHAP.NGAYHD,
		CHIETKHAU = SAVEPHIEUNHAP.CHIETKHAU
	WHERE MAPN = SAVEPHIEUNHAP.MAPN;
	IF (SQLCODE != 0) THEN
		SELECT MAX(MAPN) INTO SAVEPHIEUNHAP.MAPN FROM DUOC.PHIEUNHAP WHERE LEFT(MAPN, 4) = TO_CHAR(SAVEPHIEUNHAP.NGAY, 'YYYY');
		IF (SAVEPHIEUNHAP.MAPN IS NULL OR SAVEPHIEUNHAP.MAPN = '') THEN
			SET SAVEPHIEUNHAP.MAPN = TO_CHAR(SAVEPHIEUNHAP.NGAY, 'YYYY') || '000001';
		ELSE
			SET SAVEPHIEUNHAP.MAPN = LTRIM(CAST(SAVEPHIEUNHAP.MAPN AS BIGINT) + 1);
		END IF;		
		INSERT INTO DUOC.PHIEUNHAP (MAPN, MANCC, NGUONSPID, MAKHO, NGAY, SOHD, NGAYHD, CHIETKHAU)
		VALUES (SAVEPHIEUNHAP.MAPN, SAVEPHIEUNHAP.MANCC, SAVEPHIEUNHAP.NGUONSPID, SAVEPHIEUNHAP.MAKHO, SAVEPHIEUNHAP.NGAY, SAVEPHIEUNHAP.SOHD, SAVEPHIEUNHAP.NGAYHD, SAVEPHIEUNHAP.CHIETKHAU);		
	END IF;
END P1;

CREATE OR REPLACE PROCEDURE DUOC.SAVEPHIEUTHANHLY 
(
INOUT MATL CHAR(10),
IN LOAITLID CHAR(10),
IN MAKHO CHAR(2),
IN NGAY DATE
)
P1: BEGIN ATOMIC
	DECLARE SQLCODE INT;
	--IF EXISTS(SELECT * FROM THIETBI.PHIEUXUAT WHERE MATL = SAVEPHIEUXUAT.MATL AND DADUYET = 1) THEN
	--	RETURN;
	--END IF;
	
	UPDATE DUOC.PHIEUTHANHLY
	SET LOAITLID = SAVEPHIEUTHANHLY.LOAITLID,
		MAKHO = SAVEPHIEUTHANHLY.MAKHO,
		NGAY = SAVEPHIEUTHANHLY.NGAY
	WHERE MATL = SAVEPHIEUTHANHLY.MATL;
	IF (SQLCODE != 0) THEN
		SELECT MAX(MATL) INTO SAVEPHIEUTHANHLY.MATL FROM DUOC.PHIEUTHANHLY WHERE LEFT(MATL, 4) = TO_CHAR(SAVEPHIEUTHANHLY.NGAY, 'YYYY');
		IF (SAVEPHIEUTHANHLY.MATL IS NULL OR SAVEPHIEUTHANHLY.MATL = '') THEN
			SET SAVEPHIEUTHANHLY.MATL = TO_CHAR(SAVEPHIEUTHANHLY.NGAY, 'YYYY') || '000001';
		ELSE
			SET SAVEPHIEUTHANHLY.MATL = LTRIM(CAST(SAVEPHIEUTHANHLY.MATL AS BIGINT) + 1);
		END IF;		
		INSERT INTO DUOC.PHIEUTHANHLY (MATL, LOAITLID, MAKHO, NGAY)
		VALUES (SAVEPHIEUTHANHLY.MATL, SAVEPHIEUTHANHLY.LOAITLID, SAVEPHIEUTHANHLY.MAKHO, SAVEPHIEUTHANHLY.NGAY);		
	END IF;
END P1;

CREATE OR REPLACE PROCEDURE DUOC.SAVEPHIEUTRANCC 
(
INOUT MAPTNCC CHAR(10),
IN MANCC CHAR(5),
IN MAKHO CHAR(2),
IN NGAY DATE
)
P1: BEGIN ATOMIC
	DECLARE SQLCODE INT;
	--IF EXISTS(SELECT * FROM THIETBI.PHIEUXUAT WHERE MAPTNCC = SAVEPHIEUXUAT.MAPTNCC AND DADUYET = 1) THEN
	--	RETURN;
	--END IF;
	
	UPDATE DUOC.PHIEUTRANCC
	SET MANCC = SAVEPHIEUTRANCC.MANCC,
		MAKHO = SAVEPHIEUTRANCC.MAKHO,
		NGAY = SAVEPHIEUTRANCC.NGAY
	WHERE MAPTNCC = SAVEPHIEUTRANCC.MAPTNCC;
	IF (SQLCODE != 0) THEN
		SELECT MAX(MAPTNCC) INTO SAVEPHIEUTRANCC.MAPTNCC FROM DUOC.PHIEUTRANCC WHERE LEFT(MAPTNCC, 4) = TO_CHAR(SAVEPHIEUTRANCC.NGAY, 'YYYY');
		IF (SAVEPHIEUTRANCC.MAPTNCC IS NULL OR SAVEPHIEUTRANCC.MAPTNCC = '') THEN
			SET SAVEPHIEUTRANCC.MAPTNCC = TO_CHAR(SAVEPHIEUTRANCC.NGAY, 'YYYY') || '000001';
		ELSE
			SET SAVEPHIEUTRANCC.MAPTNCC = LTRIM(CAST(SAVEPHIEUTRANCC.MAPTNCC AS BIGINT) + 1);
		END IF;		
		INSERT INTO DUOC.PHIEUTRANCC (MAPTNCC, MANCC, MAKHO, NGAY)
		VALUES (SAVEPHIEUTRANCC.MAPTNCC, SAVEPHIEUTRANCC.MANCC, SAVEPHIEUTRANCC.MAKHO, SAVEPHIEUTRANCC.NGAY);		
	END IF;
END P1;

CREATE OR REPLACE PROCEDURE DUOC.SAVEPHIEUXUAT 
(
INOUT MAPX CHAR(10),
IN MAKH CHAR(10),
IN MAKHO CHAR(2),
IN NGAY DATE,
IN MABS CHAR(5),
IN CHANDOAN VARCHAR(200),
IN MAKP CHAR(3),
IN LOIDAN VARCHAR(300)
)
P1: BEGIN ATOMIC
	DECLARE SQLCODE INT;
	IF EXISTS(SELECT * FROM DUOC.PHIEUXUAT WHERE MAPX = SAVEPHIEUXUAT.MAPX AND DADUYET = 1) THEN
		RETURN;
	END IF;
	IF (DUOC.CHECKKHOASONAM(TO_CHAR(SAVEPHIEUXUAT.NGAY, 'YYYYMM')) = 1) THEN
		RETURN;
	END IF;
	IF (SAVEPHIEUXUAT.MABS = '') THEN
		SET SAVEPHIEUXUAT.MABS = NULL;
	END IF;
	IF (SAVEPHIEUXUAT.MAKP = '') THEN
		SET SAVEPHIEUXUAT.MAKP = NULL;
	END IF;
	UPDATE DUOC.PHIEUXUAT
	SET MAKH = SAVEPHIEUXUAT.MAKH,
		MAKHO = SAVEPHIEUXUAT.MAKHO,
		NGAY = SAVEPHIEUXUAT.NGAY,
		CHANDOAN = SAVEPHIEUXUAT.CHANDOAN,
		LOIDAN = SAVEPHIEUXUAT.LOIDAN
	WHERE MAPX = SAVEPHIEUXUAT.MAPX;
	IF (SQLCODE != 0) THEN
		SELECT MAX(MAPX) INTO SAVEPHIEUXUAT.MAPX FROM DUOC.PHIEUXUAT WHERE LEFT(MAPX, 2) = TO_CHAR(SAVEPHIEUXUAT.NGAY, 'YY');
		IF (SAVEPHIEUXUAT.MAPX IS NULL OR SAVEPHIEUXUAT.MAPX = '') THEN
			SET SAVEPHIEUXUAT.MAPX = TO_CHAR(SAVEPHIEUXUAT.NGAY, 'YY') || '00000001';
		ELSE
			SET SAVEPHIEUXUAT.MAPX = LTRIM(CAST(SAVEPHIEUXUAT.MAPX AS BIGINT) + 1);
		END IF;		
		INSERT INTO DUOC.PHIEUXUAT (MAPX, MAKH, MAKHO, NGAY, MABS, CHANDOAN, MAKP, LOIDAN)
		VALUES (SAVEPHIEUXUAT.MAPX, SAVEPHIEUXUAT.MAKH, SAVEPHIEUXUAT.MAKHO, SAVEPHIEUXUAT.NGAY, SAVEPHIEUXUAT.MABS, SAVEPHIEUXUAT.CHANDOAN, SAVEPHIEUXUAT.MAKP, SAVEPHIEUXUAT.LOIDAN);		
	END IF;
END P1;

CREATE OR REPLACE PROCEDURE DUOC.SAVEQUICACH 
(
INOUT QUICACHID CHAR(3),
IN TENQUICACH VARCHAR(50)
)
P1: BEGIN ATOMIC
	DECLARE SQLCODE INT;
	UPDATE DUOC.QUICACH
	SET TENQUICACH = SAVEQUICACH.TENQUICACH
	WHERE QUICACHID = SAVEQUICACH.QUICACHID;
	IF (SQLCODE != 0) THEN
		SELECT MAX(QUICACHID) INTO SAVEQUICACH.QUICACHID FROM DUOC.QUICACH;
		IF (SAVEQUICACH.QUICACHID IS NULL OR SAVEQUICACH.QUICACHID = '') THEN
			SET SAVEQUICACH.QUICACHID = '001';
		ELSE
			SET SAVEQUICACH.QUICACHID = RIGHT('00' || LTRIM(CAST(SAVEQUICACH.QUICACHID AS SMALLINT) + 1), 3);
		END IF;		
		INSERT INTO DUOC.QUICACH (QUICACHID, TENQUICACH) VALUES (SAVEQUICACH.QUICACHID, SAVEQUICACH.TENQUICACH);		
	END IF;
END P1;

CREATE OR REPLACE PROCEDURE DUOC.SAVESANPHAM 
(
INOUT MASP CHAR(10),
IN DONVIID CHAR(3),
IN NHOMSPID CHAR(5),
IN TENSP VARCHAR(100),
IN HOATCHAT VARCHAR(100),
IN HANGSX VARCHAR(100),
IN NUOCSX VARCHAR(100),
IN TRONGNUOC SMALLINT,
IN HIEULUC SMALLINT   
)
P1: BEGIN ATOMIC
	DECLARE SQLCODE INT;
	UPDATE DUOC.SANPHAM
	SET DONVIID = SAVESANPHAM.DONVIID,
		NHOMSPID = SAVESANPHAM.NHOMSPID,
		TENSP = SAVESANPHAM.TENSP,
		HOATCHAT = SAVESANPHAM.HOATCHAT,
		HANGSX = SAVESANPHAM.HANGSX,
		NUOCSX = SAVESANPHAM.NUOCSX,
		TRONGNUOC = SAVESANPHAM.TRONGNUOC,
		HIEULUC = SAVESANPHAM.HIEULUC	
	WHERE MASP = SAVESANPHAM.MASP;
	IF (SQLCODE != 0) THEN
		SELECT MAX(MASP) INTO SAVESANPHAM.MASP FROM DUOC.SANPHAM WHERE LEFT(MASP, 5) = SAVESANPHAM.NHOMSPID;
		IF (SAVESANPHAM.MASP IS NULL OR SAVESANPHAM.MASP = '') THEN
			SET SAVESANPHAM.MASP = SAVESANPHAM.NHOMSPID || '00001';
		ELSE
			SET SAVESANPHAM.MASP = RIGHT('00' || LTRIM(CAST(SAVESANPHAM.MASP AS BIGINT) + 1), 10);
		END IF;		
		INSERT INTO DUOC.SANPHAM (MASP, DONVIID, NHOMSPID, TENSP, HOATCHAT, HANGSX, NUOCSX, TRONGNUOC, HIEULUC ) 
		VALUES (SAVESANPHAM.MASP, SAVESANPHAM.DONVIID, SAVESANPHAM.NHOMSPID, SAVESANPHAM.TENSP, SAVESANPHAM.HOATCHAT, SAVESANPHAM.HANGSX, SAVESANPHAM.NUOCSX, SAVESANPHAM.TRONGNUOC, SAVESANPHAM.HIEULUC);		
	END IF;
END P1;

CREATE OR REPLACE PROCEDURE DUOC.SAVESANPHAMSD 
(
INOUT MASPSD CHAR(15),
IN MASP CHAR(10),
IN NGUONSPID CHAR(2),
IN MANCC CHAR(5),
IN GIAXUAT FLOAT,
IN GIANHAP FLOAT
)
P1: BEGIN ATOMIC
	SELECT MASPSD INTO SAVESANPHAMSD.MASPSD FROM DUOC.SANPHAMSD 
	WHERE MASP = SAVESANPHAMSD.MASP 
		AND NGUONSPID = SAVESANPHAMSD.NGUONSPID 
		AND MANCC = SAVESANPHAMSD.MANCC 
		AND ROUND(GIAXUAT,0) = ROUND(SAVESANPHAMSD.GIAXUAT,0)
		AND ROUND(GIANHAP,0) = ROUND(SAVESANPHAMSD.GIANHAP,0)
		FETCH FIRST ROW ONLY;
	IF (SAVESANPHAMSD.MASPSD IS NULL OR SAVESANPHAMSD.MASPSD = '') THEN
		SELECT MAX(MASPSD) INTO SAVESANPHAMSD.MASPSD FROM DUOC.SANPHAMSD WHERE LEFT(MASPSD, 10) = SAVESANPHAMSD.MASP;
		IF (SAVESANPHAMSD.MASPSD IS NULL OR SAVESANPHAMSD.MASPSD = '') THEN
			SET SAVESANPHAMSD.MASPSD = SAVESANPHAMSD.MASP || '00001';
		ELSE
			SET SAVESANPHAMSD.MASPSD = RIGHT('0000' || LTRIM(CAST(SAVESANPHAMSD.MASPSD AS BIGINT) + 1), 15);
		END IF;		
		INSERT INTO DUOC.SANPHAMSD (MASPSD, MASP, NGUONSPID, MANCC, GIAXUAT, GIANHAP) 
		VALUES (SAVESANPHAMSD.MASPSD, SAVESANPHAMSD.MASP, SAVESANPHAMSD.NGUONSPID, SAVESANPHAMSD.MANCC, SAVESANPHAMSD.GIAXUAT, SAVESANPHAMSD.GIANHAP);		
	END IF;
END P1;

CREATE OR REPLACE PROCEDURE DUOC.SAVESANPHAMTON 
(
IN NAMTHANG CHAR(6),
IN MAKHO CHAR(2),
IN MASPSD CHAR(15),
IN HANDUNG CHAR(6),
IN SOLUONG FLOAT
)
P1: BEGIN ATOMIC
	DECLARE SQLCODE INT;
	--IF (DUOC.CHECKKHOASONAM(SAVESANPHAMTON.NAMTHANG) = 1) THEN
	--	RETURN;
	--END IF;
	UPDATE DUOC.SANPHAMTON
	SET SOLUONG = SOLUONG + SAVESANPHAMTON.SOLUONG
	WHERE NAMTHANG = SAVESANPHAMTON.NAMTHANG AND
		MAKHO = SAVESANPHAMTON.MAKHO AND
		MASPSD = SAVESANPHAMTON.MASPSD AND
		HANDUNG = SAVESANPHAMTON.HANDUNG;
	IF (SAVESANPHAMTON.SOLUONG > 0) THEN
		UPDATE DUOC.SANPHAMTON
		SET SOLUONGAO = SOLUONGAO + SAVESANPHAMTON.SOLUONG
		WHERE NAMTHANG = SAVESANPHAMTON.NAMTHANG AND
			MAKHO = SAVESANPHAMTON.MAKHO AND
			MASPSD = SAVESANPHAMTON.MASPSD AND
			HANDUNG = SAVESANPHAMTON.HANDUNG;
	END IF;
	IF (SQLCODE != 0) THEN
		INSERT INTO DUOC.SANPHAMTON (NAMTHANG, MAKHO, MASPSD, HANDUNG, SOLUONG, SOLUONGAO) 
		VALUES (SAVESANPHAMTON.NAMTHANG, SAVESANPHAMTON.MAKHO, SAVESANPHAMTON.MASPSD, SAVESANPHAMTON.HANDUNG, SAVESANPHAMTON.SOLUONG, SAVESANPHAMTON.SOLUONG);		
	END IF;
END P1;

CREATE OR REPLACE PROCEDURE DUOC.SAVESANPHAMTONAO 
(
IN NAMTHANG CHAR(6),
IN MAKHO CHAR(2),
IN MASPSD CHAR(15),
IN HANDUNG CHAR(6),
IN SOLUONG FLOAT
)
P1: BEGIN ATOMIC
	DECLARE SQLCODE INT;
	IF (DUOC.CHECKKHOASONAM(SAVESANPHAMTONAO.NAMTHANG) = 1) THEN
		RETURN;
	END IF;
	UPDATE DUOC.SANPHAMTON
	SET SOLUONGAO = SOLUONGAO + SAVESANPHAMTONAO.SOLUONG
	WHERE NAMTHANG = SAVESANPHAMTONAO.NAMTHANG AND
		MAKHO = SAVESANPHAMTONAO.MAKHO AND
		MASPSD = SAVESANPHAMTONAO.MASPSD AND
		HANDUNG = SAVESANPHAMTONAO.HANDUNG;
END P1;

CREATE OR REPLACE PROCEDURE DUOC.SAVETHOIGIANKHOASO 
(
IN TUNGAY DATE,
IN DENNGAY DATE
)
P1: BEGIN ATOMIC
	DECLARE M_NAMTHANG CHAR(6);
	IF EXISTS(SELECT * FROM DUOC.THOIGIANKHOASO WHERE SAVETHOIGIANKHOASO.TUNGAY BETWEEN TUNGAY AND DENNGAY) THEN
		RETURN;
	END IF;	
	IF EXISTS(SELECT * FROM DUOC.THOIGIANKHOASO WHERE SAVETHOIGIANKHOASO.DENNGAY BETWEEN TUNGAY AND DENNGAY) THEN
		RETURN;
	END IF;
	SELECT MAX(NAMTHANG) INTO M_NAMTHANG FROM DUOC.THOIGIANKHOASO;
	IF (M_NAMTHANG IS NULL OR M_NAMTHANG = '') THEN
		SET M_NAMTHANG = TO_CHAR(SAVETHOIGIANKHOASO.TUNGAY, 'YYYYMM');
	ELSE
		IF (SUBSTR(M_NAMTHANG, 5, 2) = '12') THEN
			SET M_NAMTHANG = LTRIM(CAST(SUBSTR(M_NAMTHANG, 1, 4) AS SMALLINT) + 1) || '01';
		ELSE
			SET M_NAMTHANG = LTRIM(CAST(M_NAMTHANG AS BIGINT) + 1);
		END IF;
	END IF;
	
	UPDATE DUOC.THOIGIANKHOASO SET DAKHOA = 1;
	
	INSERT INTO DUOC.THOIGIANKHOASO (NAMTHANG, TUNGAY, DENNGAY, DAKHOA)
	VALUES (M_NAMTHANG, SAVETHOIGIANKHOASO.TUNGAY, SAVETHOIGIANKHOASO.DENNGAY, 0);
	--KET CHUYEN SAN PHAM TON
	INSERT INTO DUOC.SANPHAMTON (NAMTHANG, MAKHO, MASPSD, HANDUNG, SOLUONG, SOLUONGAO)
	(SELECT M_NAMTHANG, MAKHO, MASPSD, HANDUNG, SOLUONG, SOLUONG FROM DUOC.SANPHAMTON WHERE NAMTHANG = (SELECT MAX(NAMTHANG) FROM DUOC.SANPHAMTON));	
END P1;

CREATE OR REPLACE PROCEDURE DUOC.SETXUATID ()
P1: BEGIN
	DECLARE M_XUATID CHAR(15);
	FOR r AS SELECT * FROM DUOC.CHITIETXUAT DO
		SELECT MAX(XUATID) INTO M_XUATID FROM DUOC.CHITIETXUAT WHERE LEFT(MAPX,10) = r.MAPX; 
		IF M_XUATID IS NULL OR M_XUATID = '' THEN
	 	   	SET M_XUATID = r.MAPX || '00001';
	 	ELSE
	 		SET M_XUATID = LTRIM(CAST(M_XUATID AS BIGINT) + 1);
	 	END IF;
	 	UPDATE DUOC.CHITIETXUAT SET XUATID = M_XUATID WHERE MAPX = r.MAPX AND MASPSD = r.MASPSD;
	END FOR;	 
	
END P1;

CREATE PROCEDURE DUOC.BAOCAOBS 
(
IN TUNGAY DATE,
IN DENNGAY DATE
)
	DYNAMIC RESULT SETS 1
P1: BEGIN
	-- Declare cursor
	DECLARE cursor1 CURSOR WITH RETURN for
	-- #######################################################################
	-- # Replace the SQL statement with your statement.
	-- #  Note: Be sure to end statements with the terminator character (usually ';')
	-- #
	-- # The example SQL statement SELECT NAME FROM SYSIBM.SYSTABLES
	-- # returns all names from SYSIBM.SYSTABLES.
	-- ######################################################################
		SELECT TK.MASO,
			TK.NOIDUNG, 
			TK.MASPSD, 
			SP.TENSP, 
			SP.TENDONVI, 
			TK.SOLUONG,
			SD.GIANHAP,
			SD.GIANHAP * TK.SOLUONG AS THANHTIENNHAP,
			TK.GIAXUAT,
			TK.SOTIEN AS THANHTIENXUAT,
			(TK.GIAXUAT - SD.GIANHAP) * TK.SOLUONG AS LOINHUAN
			FROM (SELECT BS.MABS AS MASO, BS.HOTEN AS NOIDUNG, CT.MASPSD, CT.GIAXUAT, SUM(CT.SOLUONG) AS SOLUONG, SUM(CT.SOLUONG * CT.GIAXUAT) AS SOTIEN
				FROM DUOC.CHITIETXUAT CT JOIN DUOC.PHIEUXUAT PX ON CT.MAPX = PX.MAPX	
					JOIN DUOC.BACSI BS ON PX.MABS = BS.MABS			
				WHERE PX.NGAY BETWEEN BAOCAOBS.TUNGAY AND BAOCAOBS.DENNGAY AND PX.DADUYET = 1
				GROUP BY BS.MABS, BS.HOTEN, CT.MASPSD, CT.GIAXUAT) TK
			JOIN DUOC.SANPHAMSD SD ON TK.MASPSD = SD.MASPSD
			JOIN DUOC.VIEWSANPHAM SP ON SD.MASP = SP.MASP
		ORDER BY TK.NOIDUNG, SP.TENSP;

	-- Cursor left open for client application
	OPEN cursor1;
END P1;

CREATE PROCEDURE DUOC.BAOCAOLOINHUAN 
(
IN TUNGAY DATE,
IN DENNGAY DATE  
)
DYNAMIC RESULT SETS 1
------------------------------------------------------------------------
-- SQL Stored Procedure 
------------------------------------------------------------------------
P1: BEGIN
	-- Declare cursor
	DECLARE cursor1 CURSOR WITH RETURN FOR
		SELECT TK.MASPSD, 
			SP.TENSP, 
			SP.TENDONVI, 
			SP.NHOMSPID, 
			SP.TENNHOMSP, 
			TK.SOLUONG,
			SD.GIANHAP,
			SD.GIANHAP * TK.SOLUONG AS THANHTIENNHAP,
			TK.GIAXUAT,
			TK.SOTIEN AS THANHTIENXUAT,
			(TK.GIAXUAT - SD.GIANHAP) * TK.SOLUONG AS LOINHUAN
			FROM (SELECT CT.MASPSD, CT.GIAXUAT, SUM(CT.SOLUONG) AS SOLUONG, SUM(CT.SOLUONG * CT.GIAXUAT) AS SOTIEN
				FROM DUOC.CHITIETXUAT CT JOIN DUOC.PHIEUXUAT PX ON CT.MAPX = PX.MAPX				
				WHERE PX.NGAY BETWEEN BAOCAOLOINHUAN.TUNGAY AND BAOCAOLOINHUAN.DENNGAY AND PX.DADUYET = 1
				GROUP BY CT.MASPSD, CT.GIAXUAT) TK
			JOIN DUOC.SANPHAMSD SD ON TK.MASPSD = SD.MASPSD
			JOIN DUOC.VIEWSANPHAM SP ON SD.MASP = SP.MASP
			ORDER BY SP.NHOMSPID, TK.MASPSD;
	-- Cursor left open for client application
	OPEN cursor1;
END P1;

CREATE PROCEDURE DUOC.BAOCAONHAPKHOCT 
(
IN TUNGAY DATE,
IN DENNGAY DATE,
IN LOAISPID CHAR(2)
)
	DYNAMIC RESULT SETS 1
P1: BEGIN
	-- Declare cursor
	DECLARE cursor1 CURSOR WITH RETURN for
		SELECT NCC.MANCC,
			NCC.TENNCC,
			PN.SOHD,
			PN.NGAYHD,
			SP.TENSP,
			DV.TENDONVI,
			CT.SOLUONG,
			CT.GIANHAP,
			INTEGER(CT.SOLUONG * CT.GIANHAP) AS THANHTIEN
		FROM DUOC.SANPHAM SP
			JOIN DUOC.CHITIETNHAP CT ON SP.MASP = CT.MASP
			JOIN DUOC.PHIEUNHAP PN ON CT.MAPN = PN.MAPN
			JOIN DUOC.DONVI DV ON SP.DONVIID = DV.DONVIID
			JOIN DUOC.NHACUNGCAP NCC ON PN.MANCC = NCC.MANCC
			JOIN DUOC.NHOMSP NH ON SP.NHOMSPID = NH.NHOMSPID
		WHERE PN.NGAY BETWEEN BAOCAONHAPKHOCT.TUNGAY AND BAOCAONHAPKHOCT.DENNGAY 
			AND NH.LOAISPID = CASE BAOCAONHAPKHOCT.LOAISPID WHEN '' THEN NH.LOAISPID ELSE BAOCAONHAPKHOCT.LOAISPID END
		ORDER BY NCC.MANCC, PN.NGAYHD, PN.SOHD, SP.TENSP;
	OPEN cursor1;
END P1;

CREATE PROCEDURE DUOC.BAOCAONHAPKHOTH 
(
IN TUNGAY DATE,
IN DENNGAY DATE,
IN LOAISPID CHAR(2)
)
	DYNAMIC RESULT SETS 1
P1: BEGIN
	-- Declare cursor
	DECLARE cursor1 CURSOR WITH RETURN for
		SELECT NCC.MANCC,
			NCC.TENNCC,
			SP.TENSP,
			DV.TENDONVI,
			SUM(CT.SOLUONG) AS SOLUONG,
			CT.GIANHAP,
			SUM(CT.SOLUONG * CT.GIANHAP) AS THANHTIEN
		FROM DUOC.SANPHAM SP
			JOIN DUOC.CHITIETNHAP CT ON SP.MASP = CT.MASP
			JOIN DUOC.PHIEUNHAP PN ON CT.MAPN = PN.MAPN
			JOIN DUOC.DONVI DV ON SP.DONVIID = DV.DONVIID
			JOIN DUOC.NHACUNGCAP NCC ON PN.MANCC = NCC.MANCC
			JOIN DUOC.NHOMSP NH ON SP.NHOMSPID = NH.NHOMSPID
		WHERE PN.NGAY BETWEEN BAOCAONHAPKHOTH.TUNGAY AND BAOCAONHAPKHOTH.DENNGAY AND NH.LOAISPID = BAOCAONHAPKHOTH.LOAISPID
		GROUP BY NCC.MANCC,
			NCC.TENNCC,
			SP.TENSP,
			DV.TENDONVI,
			CT.GIANHAP
		ORDER BY NCC.MANCC, SP.TENSP;
	
	OPEN cursor1;
END P1;

CREATE PROCEDURE DUOC.BAOCAONXTGIANHAP 
(
IN NAMTHANG CHAR(6),
IN MAKHO CHAR(2)  
)
DYNAMIC RESULT SETS 1
------------------------------------------------------------------------
-- SQL Stored Procedure 
------------------------------------------------------------------------
P1: BEGIN
	-- Declare cursor
	DECLARE cursor1 CURSOR WITH RETURN FOR
		SELECT TK.MASPSD, SP.TENSP, SP.TENDONVI, SP.NHOMSPID, SP.TENNHOMSP, DUOC.GETGIANHAP(SD.MASPSD) AS DONGIA,
		SLDK, 
		DUOC.GETGIANHAP(SD.MASPSD) * SLDK AS STDK, 
		SLNHAP, 
		DUOC.GETGIANHAP(SD.MASPSD) * SLNHAP AS STNHAP, 
		SLXUAT, 
		DUOC.GETGIANHAP(SD.MASPSD) * SLXUAT AS STXUAT, 
		SLTRANCC, 
		DUOC.GETGIANHAP(SD.MASPSD) * SLTRANCC AS STTRANCC, 
		SLTHANHLY,
		DUOC.GETGIANHAP(SD.MASPSD) * SLTHANHLY AS STTHANHLY,
		SLCK,
		DUOC.GETGIANHAP(SD.MASPSD) * SLCK AS STCK
		FROM 
		(SELECT MASPSD, 
			DUOC.TONDK(TON.NAMTHANG, TON.MAKHO, TON.MASPSD) AS SLDK,
			DUOC.NHAPTK(TON.NAMTHANG, TON.MAKHO, TON.MASPSD) AS SLNHAP,
			DUOC.XUATTK(TON.NAMTHANG, TON.MAKHO, TON.MASPSD) AS SLXUAT,
			DUOC.TRANCC(TON.NAMTHANG, TON.MAKHO, TON.MASPSD) AS SLTRANCC,
			DUOC.THANHLY(TON.NAMTHANG, TON.MAKHO, TON.MASPSD) AS SLTHANHLY,
			DUOC.TONCK(TON.NAMTHANG, TON.MAKHO, TON.MASPSD) AS SLCK
		FROM DUOC.SANPHAMTON TON
		WHERE NAMTHANG = BAOCAONXTGIANHAP.NAMTHANG AND MAKHO = BAOCAONXTGIANHAP.MAKHO) TK 
			JOIN DUOC.SANPHAMSD SD ON TK.MASPSD = SD.MASPSD
			JOIN DUOC.VIEWSANPHAM SP ON SD.MASP = SP.MASP
		ORDER BY SP.NHOMSPID, TK.MASPSD; 

	-- Cursor left open for client application
	OPEN cursor1;
END P1;

CREATE PROCEDURE DUOC.BAOCAONXTGIAXUAT 
(
IN NAMTHANG CHAR(6),
IN MAKHO CHAR(2)  
)
DYNAMIC RESULT SETS 1
------------------------------------------------------------------------
-- SQL Stored Procedure 
------------------------------------------------------------------------
P1: BEGIN
	-- Declare cursor
	DECLARE cursor1 CURSOR WITH RETURN FOR
		SELECT TK.MASPSD, SP.TENSP, SP.TENDONVI, SP.NHOMSPID, SP.TENNHOMSP, SD.GIAXUAT AS DONGIA,
		CASE WHEN SLDK IS NULL THEN 0 ELSE SLDK END AS SLDK, 
		DUOC.GETGIANHAP(SD.MASPSD) * CASE WHEN SLDK IS NULL THEN 0 ELSE SLDK END AS STDK, 
		CASE WHEN SLNHAP IS NULL THEN 0 ELSE SLNHAP END AS SLNHAP , 
		DUOC.GETGIANHAP(SD.MASPSD) * CASE WHEN SLNHAP IS NULL THEN 0 ELSE SLNHAP END AS STNHAP, 
		CASE WHEN SLXUAT IS NULL THEN 0 ELSE SLXUAT END  AS SLXUAT, 
		DUOC.GETGIANHAP(SD.MASPSD) * CASE WHEN SLXUAT IS NULL THEN 0 ELSE SLXUAT END  AS STXUAT, 
		CASE WHEN SLTRANCC IS NULL THEN 0 ELSE SLTRANCC END AS SLTRANCC, 
		DUOC.GETGIANHAP(SD.MASPSD) * CASE WHEN SLTRANCC IS NULL THEN 0 ELSE SLTRANCC END AS STTRANCC, 
		CASE WHEN SLTHANHLY IS NULL THEN 0 ELSE SLTHANHLY END AS SLTHANHLY,
		DUOC.GETGIANHAP(SD.MASPSD) * CASE WHEN SLTHANHLY IS NULL THEN 0 ELSE SLTHANHLY END AS STTHANHLY,
		CASE WHEN SLCK IS NULL THEN 0 ELSE SLCK END AS SLCK,
		DUOC.GETGIANHAP(SD.MASPSD) * CASE WHEN SLCK IS NULL THEN 0 ELSE SLCK END AS STCK		FROM 
		(SELECT MASPSD, 
			DUOC.TONDK(TON.NAMTHANG, TON.MAKHO, TON.MASPSD) AS SLDK,
			DUOC.NHAPTK(TON.NAMTHANG, TON.MAKHO, TON.MASPSD) AS SLNHAP,
			DUOC.XUATTK(TON.NAMTHANG, TON.MAKHO, TON.MASPSD) AS SLXUAT,
			DUOC.TRANCC(TON.NAMTHANG, TON.MAKHO, TON.MASPSD) AS SLTRANCC,
			DUOC.THANHLY(TON.NAMTHANG, TON.MAKHO, TON.MASPSD) AS SLTHANHLY,
			DUOC.TONCK(TON.NAMTHANG, TON.MAKHO, TON.MASPSD) AS SLCK
		FROM DUOC.SANPHAMTON TON
		WHERE NAMTHANG = BAOCAONXTGIAXUAT.NAMTHANG AND MAKHO = BAOCAONXTGIAXUAT.MAKHO) TK 
			JOIN DUOC.SANPHAMSD SD ON TK.MASPSD = SD.MASPSD
			JOIN DUOC.VIEWSANPHAM SP ON SD.MASP = SP.MASP
		ORDER BY SP.NHOMSPID, TK.MASPSD; 
	-- Cursor left open for client application
	OPEN cursor1;
END P1;

CREATE PROCEDURE DUOC.BAOCAONXT_IN
(
IN TUTHANG CHAR(6),
IN DENTHANG CHAR(6),
IN MAKHO CHAR(2)  
)
DYNAMIC RESULT SETS 1
------------------------------------------------------------------------
-- SQL Stored Procedure 
------------------------------------------------------------------------
P1: BEGIN
	-- Declare cursor
	DECLARE cursor1 CURSOR WITH RETURN FOR
		SELECT SP.MASP, SP.TENSP, SP.TENDONVI, SP.NHOMSPID, SP.TENNHOMSP, TK.GIANHAP AS DONGIA,
		SUM(CASE WHEN SLDK IS NULL THEN 0 ELSE SLDK END) AS SLDK, 
		SUM(TK.GIANHAP * CASE WHEN SLDK IS NULL THEN 0 ELSE SLDK END) AS STDK, 
		SUM(CASE WHEN SLNHAP IS NULL THEN 0 ELSE SLNHAP END) AS SLNHAP , 
		SUM(TK.GIANHAP * CASE WHEN SLNHAP IS NULL THEN 0 ELSE SLNHAP END) AS STNHAP, 
		SUM(CASE WHEN SLXUAT IS NULL THEN 0 ELSE SLXUAT END)  AS SLXUAT, 
		SUM(TK.GIANHAP * CASE WHEN SLXUAT IS NULL THEN 0 ELSE SLXUAT END) AS STXUAT, 
		SUM(CASE WHEN SLTRANCC IS NULL THEN 0 ELSE SLTRANCC END) AS SLTRANCC, 
		SUM(TK.GIANHAP * CASE WHEN SLTRANCC IS NULL THEN 0 ELSE SLTRANCC END) AS STTRANCC, 
		SUM(CASE WHEN SLTHANHLY IS NULL THEN 0 ELSE SLTHANHLY END) AS SLTHANHLY,
		SUM(TK.GIANHAP * CASE WHEN SLTHANHLY IS NULL THEN 0 ELSE SLTHANHLY END) AS STTHANHLY,
		SUM(CASE WHEN SLCK IS NULL THEN 0 ELSE SLCK END) AS SLCK,
		SUM(TK.GIANHAP * CASE WHEN SLCK IS NULL THEN 0 ELSE SLCK END) AS STCK
		FROM (SELECT MASPSD, MASP, GIANHAP,
				DUOC.TONDK(BAOCAONXT_IN.TUTHANG, TON.MAKHO, TON.MASPSD) AS SLDK,
				
				(SELECT SUM(SOLUONG) 
				FROM DUOC.CHITIETNHAP CT JOIN DUOC.PHIEUNHAP PN ON CT.MAPN = PN.MAPN
				WHERE PN.NGAY BETWEEN 
					(SELECT TUNGAY FROM DUOC.THOIGIANKHOASO WHERE NAMTHANG = BAOCAONXT_IN.TUTHANG)
					AND (SELECT DENNGAY FROM DUOC.THOIGIANKHOASO WHERE NAMTHANG = BAOCAONXT_IN.DENTHANG)
				 	AND MASPSD = TON.MASPSD AND MAKHO = BAOCAONXT_IN.MAKHO) AS SLNHAP,			  
				
				(SELECT SUM(SOLUONG)
				FROM DUOC.CHITIETXUAT CT JOIN DUOC.PHIEUXUAT PX ON CT.MAPX = PX.MAPX
				WHERE PX.NGAY BETWEEN 
					(SELECT TUNGAY FROM DUOC.THOIGIANKHOASO WHERE NAMTHANG = BAOCAONXT_IN.TUTHANG)
					AND (SELECT DENNGAY FROM DUOC.THOIGIANKHOASO WHERE NAMTHANG = BAOCAONXT_IN.DENTHANG)
					AND MASPSD = TON.MASPSD AND PX.DADUYET = 1
					AND MAKHO = BAOCAONXT_IN.MAKHO) AS SLXUAT,					  
				
				(SELECT SUM(SOLUONG) 
				FROM DUOC.CHITIETTRANCC CT JOIN DUOC.PHIEUTRANCC PX ON CT.MAPTNCC = PX.MAPTNCC
				WHERE PX.NGAY BETWEEN 
					(SELECT TUNGAY FROM DUOC.THOIGIANKHOASO WHERE NAMTHANG = BAOCAONXT_IN.TUTHANG)
					AND (SELECT DENNGAY FROM DUOC.THOIGIANKHOASO WHERE NAMTHANG = BAOCAONXT_IN.DENTHANG)
					AND MASPSD = TON.MASPSD AND MAKHO = BAOCAONXT_IN.MAKHO) AS SLTRANCC,				
				
				(SELECT SUM(SOLUONG) 
				FROM DUOC.CHITIETTHANHLY CT JOIN DUOC.PHIEUTHANHLY PX ON CT.MATL = PX.MATL
				WHERE PX.NGAY BETWEEN 
					(SELECT TUNGAY FROM DUOC.THOIGIANKHOASO WHERE NAMTHANG = BAOCAONXT_IN.TUTHANG)
					AND (SELECT DENNGAY FROM DUOC.THOIGIANKHOASO WHERE NAMTHANG = BAOCAONXT_IN.DENTHANG)
					AND MASPSD = TON.MASPSD AND MAKHO = BAOCAONXT_IN.MAKHO) AS SLTHANHLY,
				
				DUOC.TONCK(BAOCAONXT_IN.DENTHANG, TON.MAKHO, TON.MASPSD) AS SLCK
				FROM (SELECT DISTINCT SD.MASPSD, SPT.MAKHO, SD.MASP, ROUND(SD.GIANHAP, 0) AS GIANHAP 
					  FROM DUOC.SANPHAMTON SPT 
					  	JOIN DUOC.SANPHAMSD SD ON SPT.MASPSD = SD.MASPSD
				WHERE SPT.MAKHO = BAOCAONXT_IN.MAKHO)TON
					  --WHERE NAMTHANG >= BAOCAONXT_IN.TUTHANG AND NAMTHANG <= BAOCAONXT_IN.DENTHANG AND MAKHO = BAOCAONXT_IN.MAKHO)TON
			) TK 
		JOIN DUOC.VIEWSANPHAM SP ON SP.MASP = TK.MASP  
		GROUP BY SP.MASP, SP.TENSP, SP.TENDONVI, SP.NHOMSPID, SP.TENNHOMSP, TK.GIANHAP
		ORDER BY SP.NHOMSPID, SP.MASP; 
	-- Cursor left open for client application
	OPEN cursor1;
END P1;

CREATE PROCEDURE DUOC.BAOCAONXT_OUT
(
IN TUTHANG CHAR(6),
IN DENTHANG CHAR(6),
IN MAKHO CHAR(2)  
)
DYNAMIC RESULT SETS 1
------------------------------------------------------------------------
-- SQL Stored Procedure 
------------------------------------------------------------------------
P1: BEGIN
	-- Declare cursor
	DECLARE cursor1 CURSOR WITH RETURN FOR
		SELECT TK.MASPSD, SP.TENSP, SP.TENDONVI, SP.NHOMSPID, SP.TENNHOMSP, SD.GIAXUAT AS DONGIA,
		CASE WHEN SLDK IS NULL THEN 0 ELSE SLDK END AS SLDK, 
		SD.GIAXUAT * CASE WHEN SLDK IS NULL THEN 0 ELSE SLDK END AS STDK, 
		CASE WHEN SLNHAP IS NULL THEN 0 ELSE SLNHAP END AS SLNHAP , 
		SD.GIAXUAT * CASE WHEN SLNHAP IS NULL THEN 0 ELSE SLNHAP END AS STNHAP, 
		CASE WHEN SLXUAT IS NULL THEN 0 ELSE SLXUAT END  AS SLXUAT, 
		SD.GIAXUAT * CASE WHEN SLXUAT IS NULL THEN 0 ELSE SLXUAT END  AS STXUAT, 
		CASE WHEN SLTRANCC IS NULL THEN 0 ELSE SLTRANCC END AS SLTRANCC, 
		SD.GIAXUAT * CASE WHEN SLTRANCC IS NULL THEN 0 ELSE SLTRANCC END AS STTRANCC, 
		CASE WHEN SLTHANHLY IS NULL THEN 0 ELSE SLTHANHLY END AS SLTHANHLY,
		SD.GIAXUAT * CASE WHEN SLTHANHLY IS NULL THEN 0 ELSE SLTHANHLY END AS STTHANHLY,
		CASE WHEN SLCK IS NULL THEN 0 ELSE SLCK END AS SLCK,
		SD.GIAXUAT * CASE WHEN SLCK IS NULL THEN 0 ELSE SLCK END AS STCK
		FROM (SELECT MASPSD, 
				DUOC.TONDK(BAOCAONXT_OUT.TUTHANG, TON.MAKHO, TON.MASPSD) AS SLDK,
				
				(SELECT SUM(SOLUONG) 
				FROM DUOC.CHITIETNHAP CT JOIN DUOC.PHIEUNHAP PN ON CT.MAPN = PN.MAPN
				WHERE PN.NGAY BETWEEN 
					(SELECT TUNGAY FROM DUOC.THOIGIANKHOASO WHERE NAMTHANG = BAOCAONXT_OUT.TUTHANG)
					AND (SELECT DENNGAY FROM DUOC.THOIGIANKHOASO WHERE NAMTHANG = BAOCAONXT_OUT.DENTHANG)
				 	AND MASPSD = TON.MASPSD AND MAKHO = BAOCAONXT_OUT.MAKHO) AS SLNHAP,			  
				
				(SELECT SUM(SOLUONG)
				FROM DUOC.CHITIETXUAT CT JOIN DUOC.PHIEUXUAT PX ON CT.MAPX = PX.MAPX
				WHERE PX.NGAY BETWEEN 
					(SELECT TUNGAY FROM DUOC.THOIGIANKHOASO WHERE NAMTHANG = BAOCAONXT_OUT.TUTHANG)
					AND (SELECT DENNGAY FROM DUOC.THOIGIANKHOASO WHERE NAMTHANG = BAOCAONXT_OUT.DENTHANG)
					AND MASPSD = TON.MASPSD AND PX.DADUYET = 1
					AND MAKHO = BAOCAONXT_OUT.MAKHO) AS SLXUAT,					  
				
				(SELECT SUM(SOLUONG) 
				FROM DUOC.CHITIETTRANCC CT JOIN DUOC.PHIEUTRANCC PX ON CT.MAPTNCC = PX.MAPTNCC
				WHERE PX.NGAY BETWEEN 
					(SELECT TUNGAY FROM DUOC.THOIGIANKHOASO WHERE NAMTHANG = BAOCAONXT_OUT.TUTHANG)
					AND (SELECT DENNGAY FROM DUOC.THOIGIANKHOASO WHERE NAMTHANG = BAOCAONXT_OUT.DENTHANG)
					AND MASPSD = TON.MASPSD AND MAKHO = BAOCAONXT_OUT.MAKHO) AS SLTRANCC,				
				
				(SELECT SUM(SOLUONG) 
				FROM DUOC.CHITIETTHANHLY CT JOIN DUOC.PHIEUTHANHLY PX ON CT.MATL = PX.MATL
				WHERE PX.NGAY BETWEEN 
					(SELECT TUNGAY FROM DUOC.THOIGIANKHOASO WHERE NAMTHANG = BAOCAONXT_OUT.TUTHANG)
					AND (SELECT DENNGAY FROM DUOC.THOIGIANKHOASO WHERE NAMTHANG = BAOCAONXT_OUT.DENTHANG)
					AND MASPSD = TON.MASPSD AND MAKHO = BAOCAONXT_OUT.MAKHO) AS SLTHANHLY,
					
				DUOC.TONCK(BAOCAONXT_OUT.DENTHANG, TON.MAKHO, TON.MASPSD) AS SLCK
				FROM (SELECT DISTINCT MASPSD, MAKHO FROM DUOC.SANPHAMTON 
					  WHERE NAMTHANG >= BAOCAONXT_OUT.TUTHANG AND 
					        NAMTHANG <= BAOCAONXT_OUT.DENTHANG AND 
					        MAKHO = BAOCAONXT_OUT.MAKHO)TON
			) TK 
		JOIN DUOC.SANPHAMSD SD ON TK.MASPSD = SD.MASPSD
		JOIN DUOC.VIEWSANPHAM SP ON SD.MASP = SP.MASP
		ORDER BY SP.NHOMSPID, TK.MASPSD; 
	-- Cursor left open for client application
	OPEN cursor1;
END P1;

CREATE PROCEDURE DUOC.BAOCAOTN 
(
IN TUNGAY DATE,
IN DENNGAY DATE
)
	DYNAMIC RESULT SETS 1
P1: BEGIN
	-- Declare cursor
	DECLARE cursor1 CURSOR WITH RETURN for
	-- #######################################################################
	-- # Replace the SQL statement with your statement.
	-- #  Note: Be sure to end statements with the terminator character (usually ';')
	-- #
	-- # The example SQL statement SELECT NAME FROM SYSIBM.SYSTABLES
	-- # returns all names from SYSIBM.SYSTABLES.
	-- ######################################################################
		SELECT TK.MASO,
			TK.NOIDUNG, 
			TK.MASPSD, 
			SP.TENSP, 
			SP.TENDONVI, 
			TK.SOLUONG,
			SD.GIANHAP,
			SD.GIANHAP * TK.SOLUONG AS THANHTIENNHAP,
			TK.GIAXUAT,
			TK.SOTIEN AS THANHTIENXUAT,
			(TK.GIAXUAT - SD.GIANHAP) * TK.SOLUONG AS LOINHUAN
			FROM (SELECT ND.TENDANGNHAP AS MASO, ND.HOTEN AS NOIDUNG, CT.MASPSD, CT.GIAXUAT, SUM(CT.SOLUONG) AS SOLUONG, SUM(CT.SOLUONG * CT.GIAXUAT) AS SOTIEN
				FROM DUOC.CHITIETXUAT CT JOIN DUOC.PHIEUXUAT PX ON CT.MAPX = PX.MAPX	
					JOIN DUOC.NGUOIDUNG ND ON PX.TENDANGNHAP = ND.TENDANGNHAP			
				WHERE PX.NGAY BETWEEN BAOCAOTN.TUNGAY AND BAOCAOTN.DENNGAY AND PX.DADUYET = 1
				GROUP BY ND.TENDANGNHAP, ND.HOTEN, CT.MASPSD, CT.GIAXUAT) TK
			JOIN DUOC.SANPHAMSD SD ON TK.MASPSD = SD.MASPSD
			JOIN DUOC.VIEWSANPHAM SP ON SD.MASP = SP.MASP
			ORDER BY TK.NOIDUNG, SP.TENSP;

	-- Cursor left open for client application
	OPEN cursor1;
END P1;

CREATE PROCEDURE DUOC.GETBIENLAI 
(
IN MAPX CHAR(10)
)
	DYNAMIC RESULT SETS 1
P1: BEGIN
	-- Declare cursor
	DECLARE cursor1 CURSOR WITH RETURN for
	-- #######################################################################
	-- # Replace the SQL statement with your statement.
	-- #  Note: Be sure to end statements with the terminator character (usually ';')
	-- #
	-- # The example SQL statement SELECT NAME FROM SYSIBM.SYSTABLES
	-- # returns all names from SYSIBM.SYSTABLES.
	-- ######################################################################
	SELECT KH.MAKH,
	KH.TENKH,
	KH.NAMSINH,
	CASE WHEN KH.GIOITINH = 0 THEN 'Nam' ELSE 'N?' END As GIOITINH,
	KH.DIACHI,
	PX.MAPX,
	PX.CHANDOAN,
	BS.HOTEN AS BACSI,
	KP.TENKP,
	SP.TENSP,
	DV.TENDONVI,
	CT.SOLUONG,
	CT.CACHDUNG,
	CT.GIAXUAT,
	CT.SOLUONG * CT.GIAXUAT AS THANHTIEN,
	ND.HOTEN AS NGUOIDUNG
FROM DUOC.PHIEUXUAT PX JOIN DUOC.CHITIETXUAT CT ON PX.MAPX = CT.MAPX
	JOIN DUOC.KHACHHANG KH ON PX.MAKH = KH.MAKH
	JOIN DUOC.BACSI BS ON PX.MABS = BS.MABS 
	JOIN DUOC.KHOAPHONG KP ON PX.MAKP = KP.MAKP
	JOIN DUOC.SANPHAMSD SD ON CT.MASPSD = SD.MASPSD
	JOIN DUOC.SANPHAM SP ON SD.MASP = SP.MASP
	JOIN DUOC.DONVI DV ON SP.DONVIID = DV.DONVIID
	JOIN DUOC.NGUOIDUNG ND ON PX.TENDANGNHAP = ND.TENDANGNHAP
WHERE PX.MAPX = GETBIENLAI.MAPX;

	-- Cursor left open for client application
	OPEN cursor1;
END P1;

CREATE PROCEDURE DUOC.GETDONTHUOC 
(
IN MAPX CHAR(10)
)
	DYNAMIC RESULT SETS 1
P1: BEGIN
	-- Declare cursor
	DECLARE cursor1 CURSOR WITH RETURN for
	-- #######################################################################
	-- # Replace the SQL statement with your statement.
	-- #  Note: Be sure to end statements with the terminator character (usually ';')
	-- #
	-- # The example SQL statement SELECT NAME FROM SYSIBM.SYSTABLES
	-- # returns all names from SYSIBM.SYSTABLES.
	-- ######################################################################
	SELECT KH.MAKH,
	KH.TENKH,
	KH.NAMSINH,
	CASE WHEN KH.GIOITINH = 0 THEN 'Nam' ELSE 'N?' END As GIOITINH,
	KH.DIACHI,
	PX.MAPX,
	PX.CHANDOAN,
	PX.LOIDAN,
	BS.HOTEN AS BACSI,
	KP.TENKP,
	SP.TENSP,
	DV.TENDONVI,
	CT.SOLUONG,
	CT.CACHDUNG,
	CT.GIAXUAT,
	CT.SOLUONG * CT.GIAXUAT AS THANHTIEN
FROM DUOC.PHIEUXUAT PX JOIN DUOC.CHITIETXUAT CT ON PX.MAPX = CT.MAPX
	JOIN DUOC.KHACHHANG KH ON PX.MAKH = KH.MAKH
	JOIN DUOC.BACSI BS ON PX.MABS = BS.MABS 
	JOIN DUOC.KHOAPHONG KP ON PX.MAKP = KP.MAKP
	JOIN DUOC.SANPHAMSD SD ON CT.MASPSD = SD.MASPSD
	JOIN DUOC.SANPHAM SP ON SD.MASP = SP.MASP
	JOIN DUOC.DONVI DV ON SP.DONVIID = DV.DONVIID
WHERE PX.MAPX = GETDONTHUOC.MAPX;

	-- Cursor left open for client application
	OPEN cursor1;
END P1;

CREATE PROCEDURE DUOC.GETTONMASPDK 
(
IN NAMTHANG CHAR(6),
IN MAKHO CHAR(2),
IN MASP CHAR(10)
) 
	DYNAMIC RESULT SETS 1
P1: BEGIN
	-- Declare cursor
	DECLARE cursor1 CURSOR WITH RETURN for
		SELECT SUM(TON.SOLUONG) AS SOLUONG
		FROM DUOC.SANPHAMTON TON JOIN DUOC.SANPHAMSD SD ON TON.MASPSD = SD.MASPSD
		WHERE TON.NAMTHANG = DUOC.GETNAMTHANGTRUO(GETTONMASPDK.NAMTHANG) 
			AND SD.MASP = GETTONMASPDK.MASP 
			AND TON.MAKHO = GETTONMASPDK.MAKHO;
	-- Cursor left open for client application
	OPEN cursor1;
END P1;

CREATE PROCEDURE DUOC.LISTCHITIETTHANHLY 
(
IN MATL CHAR(10)  
)
	DYNAMIC RESULT SETS 1
------------------------------------------------------------------------
-- SQL Stored Procedure 
------------------------------------------------------------------------
P1: BEGIN
	-- Declare cursor
	DECLARE cursor1 CURSOR WITH RETURN FOR
		SELECT CT.MASPSD, SP.TENSP, SP.TENDONVI, CT.HANDUNG, SUBSTR(HANDUNG, 5,2) || '-' || SUBSTR(HANDUNG, 1, 4) AS THANGNAMHANDUNG, CT.SOLUONG, SD.GIAXUAT, CT.SOLUONG * SD.GIAXUAT AS THANHTIEN
		FROM DUOC.CHITIETTHANHLY CT
			JOIN DUOC.SANPHAMSD SD ON CT.MASPSD = SD.MASPSD 
 			JOIN DUOC.VIEWSANPHAM SP ON SD.MASP = SP.MASP
 		WHERE MATL = LISTCHITIETTHANHLY.MATL;

	-- Cursor left open for client application
	OPEN cursor1;
END P1;

CREATE PROCEDURE DUOC.LISTCHITIETTRANCC 
(
IN MAPTNCC CHAR(10)
)
DYNAMIC RESULT SETS 1
------------------------------------------------------------------------
-- SQL Stored Procedure 
------------------------------------------------------------------------
P1: BEGIN
	-- Declare cursor
	DECLARE cursor1 CURSOR WITH RETURN FOR
		SELECT CT.MASPSD, SP.TENSP, SP.TENDONVI, CT.HANDUNG, SUBSTR(HANDUNG, 5,2) || '-' || SUBSTR(HANDUNG, 1, 4) AS THANGNAMHANDUNG, CT.SOLUONG, SD.GIAXUAT, CT.SOLUONG * SD.GIAXUAT AS THANHTIEN
		FROM DUOC.CHITIETTRANCC CT
			JOIN DUOC.SANPHAMSD SD ON CT.MASPSD = SD.MASPSD 
 			JOIN DUOC.VIEWSANPHAM SP ON SD.MASP = SP.MASP
 		WHERE MAPTNCC = LISTCHITIETTRANCC.MAPTNCC;

	-- Cursor left open for client application
	OPEN cursor1;
END P1;

CREATE PROCEDURE DUOC.LISTCHODUYET 
(
IN NGAY DATE
)
	DYNAMIC RESULT SETS 1
P1: BEGIN
	-- Declare cursor
	DECLARE cursor1 CURSOR WITH RETURN for
	-- #######################################################################
	-- # Replace the SQL statement with your statement.
	-- #  Note: Be sure to end statements with the terminator character (usually ';')
	-- #
	-- # The example SQL statement SELECT NAME FROM SYSIBM.SYSTABLES
	-- # returns all names from SYSIBM.SYSTABLES.
	-- ######################################################################
	SELECT PX.MAPX, 
		KP.TENKP, 
		KH.TENKH, 
		KH.NAMSINH, 
		SUM(CT.SOLUONG*CT.GIAXUAT) AS SOTIEN, 
		KH.DIACHI, 
		PX.CHANDOAN,
		PX.DADUYET,
		KP.MAKP,
		BS.MABS,
		BS.HOTEN AS TENBS
	FROM DUOC.KHACHHANG KH 
		JOIN DUOC.PHIEUXUAT PX ON KH.MAKH = PX.MAKH
		JOIN DUOC.CHITIETXUAT CT ON PX.MAPX = CT.MAPX
		JOIN DUOC.KHOAPHONG KP ON PX.MAKP = KP.MAKP
		JOIN DUOC.BACSI BS ON PX.MABS = BS.MABS
	WHERE NGAY = LISTCHODUYET.NGAY
	GROUP BY PX.MAPX, 
	KP.TENKP, 
	KH.TENKH, 
	KH.NAMSINH, 
	KH.DIACHI, 
	PX.CHANDOAN,
	PX.DADUYET,
	KP.MAKP,
	KP.TENKP,
	BS.MABS,
	BS.HOTEN;
	-- Cursor left open for client application
	OPEN cursor1;
END P1;

CREATE PROCEDURE DUOC.LISTSANPHAM 
(
IN LOAISPID CHAR(2)
)
	DYNAMIC RESULT SETS 1
P1: BEGIN
	-- Declare cursor
	DECLARE cursor1 CURSOR WITH RETURN for
		SELECT SP.MASP, 
			NH.NHOMSPID, 
			SP.TENSP, 
			SP.HOATCHAT, 
			DV.DONVIID, 
			DV.TENDONVI, 
			NH.TENNHOMSP, 
			SP.HANGSX, 
			SP.NUOCSX, 
			SP.TRONGNUOC, 
			SP.HIEULUC
		FROM DUOC.SANPHAM SP 
			JOIN DUOC.NHOMSP NH ON SP.NHOMSPID = NH.NHOMSPID
			JOIN DUOC.DONVI DV ON SP.DONVIID = DV.DONVIID
		WHERE NH.LOAISPID = LISTSANPHAM.LOAISPID
		ORDER BY SP.MASP;
	-- Cursor left open for client application
	OPEN cursor1;
END P1;

CREATE PROCEDURE DUOC.LISTSANPHAMTON 
(
IN NAMTHANG CHAR(6),
IN MAKHO CHAR(2)
)
DYNAMIC RESULT SETS 1
------------------------------------------------------------------------
-- SQL Stored Procedure 
------------------------------------------------------------------------
P1: BEGIN
	-- Declare cursor
	DECLARE cursor1 CURSOR WITH RETURN FOR
		SELECT TON.MASPSD, 
			SP.TENSP, SP.TENDONVI, TON.HANDUNG,
			SUBSTR(HANDUNG, 5,2) || '-' || SUBSTR(HANDUNG, 1, 4) AS THANGNAMHANDUNG,
			(CAST(SUBSTR(HANDUNG, 1, 4) AS SMALLINT) - YEAR(CURRENT DATE)) * 12 + (CAST(SUBSTR(HANDUNG, 5, 2) AS SMALLINT) - MONTH(CURRENT DATE)) AS HANDUNGTHANG, 
			TON.SOLUONG, 
			TON.SOLUONGAO,
			SD.GIANHAP,
			SD.GIAXUAT, 
			TON.SOLUONG * SD.GIANHAP AS THANHTIEN,
			SP.NHOMSPID, SP.TENNHOMSP 
		FROM DUOC.SANPHAMTON TON JOIN DUOC.SANPHAMSD SD ON TON.MASPSD = SD.MASPSD JOIN DUOC.VIEWSANPHAM SP ON SD.MASP = SP.MASP
		WHERE NAMTHANG = LISTSANPHAMTON.NAMTHANG 
			AND MaKho = LISTSANPHAMTON.MAKHO 
			AND TON.SOLUONG > 0
		ORDER BY TON.MASPSD;

	-- Cursor left open for client application
	OPEN cursor1;
END P1;

CREATE PROCEDURE DUOC.LISTSANPHAMTONAO 
(
IN NAMTHANG CHAR(6),
IN MAKHO CHAR(2)
)
DYNAMIC RESULT SETS 1
------------------------------------------------------------------------
-- SQL Stored Procedure 
------------------------------------------------------------------------
P1: BEGIN
	-- Declare cursor
	DECLARE cursor1 CURSOR WITH RETURN FOR
		SELECT TON.MASPSD, 
			SP.TENSP, SP.HOATCHAT, SP.TENDONVI, TON.HANDUNG,
			SUBSTR(HANDUNG, 5,2) || '-' || SUBSTR(HANDUNG, 1, 4) AS THANGNAMHANDUNG,
			(CAST(SUBSTR(HANDUNG, 1, 4) AS SMALLINT) - YEAR(CURRENT DATE)) * 12 + (CAST(SUBSTR(HANDUNG, 5, 2) AS SMALLINT) - MONTH(CURRENT DATE)) AS HANDUNGTHANG, 
			TON.SOLUONGAO AS SOLUONG, 
			DUOC.GETGIANHAP(SD.MASPSD) AS GIANHAP,
			SD.GIAXUAT, 
			TON.SOLUONG * SD.GIAXUAT AS THANHTIEN,
			SP.NHOMSPID, SP.TENNHOMSP 
		FROM DUOC.SANPHAMTON TON JOIN DUOC.SANPHAMSD SD ON TON.MASPSD = SD.MASPSD JOIN DUOC.VIEWSANPHAM SP ON SD.MASP = SP.MASP
		WHERE NAMTHANG = LISTSANPHAMTONAO.NAMTHANG 
			AND MaKho = LISTSANPHAMTONAO.MAKHO 
			AND TON.SOLUONGAO > 0
		ORDER BY TON.MASPSD;

	-- Cursor left open for client application
	OPEN cursor1;
END P1;

CREATE PROCEDURE DUOC.THEKHO 
(
IN NAMTHANG CHAR(6),
IN MAKHO CHAR(2),
IN MASP CHAR(10)
)
	DYNAMIC RESULT SETS 1
P1: BEGIN
	-- Declare cursor
	DECLARE cursor1 CURSOR WITH RETURN for
		SELECT SP.MASP,
			SP.TENSP,
			'' AS TENQUICACH,
			DV.TENDONVI,
			TK.NGAY,
			TK.CTNHAP,
			TK.CTXUAT,
			TK.SOLO,
			TK.HANDUNG,
			TK.DIENGIAI,
			TK.SLNHAP,
			TK.SLXUAT
		FROM DUOC.SANPHAM SP 
			JOIN DUOC.DONVI DV ON SP.DONVIID = DV.DONVIID
			LEFT JOIN (SELECT CT.MASP,			
			PN.NGAY,
			PN.MAPN AS CTNHAP,
			'' AS CTXUAT,
			CT.SOLO,
			SUBSTR(CT.HANDUNG, 5,2) || '-' || SUBSTR(CT.HANDUNG, 1, 4) AS HANDUNG,
			NCC.TENNCC AS DIENGIAI,
			CT.SOLUONG AS SLNHAP,
			0 AS SLXUAT
		FROM DUOC.CHITIETNHAP CT
			JOIN DUOC.PHIEUNHAP PN ON CT.MAPN = PN.MAPN
			JOIN DUOC.NHACUNGCAP NCC ON PN.MANCC = NCC.MANCC
		WHERE CT.MASP = THEKHO.MASP
			AND PN.NGAY BETWEEN (SELECT TUNGAY FROM DUOC.THOIGIANKHOASO WHERE NAMTHANG = THEKHO.NAMTHANG) AND (SELECT DENNGAY FROM DUOC.THOIGIANKHOASO WHERE NAMTHANG = THEKHO.NAMTHANG)
			AND PN.MAKHO = THEKHO.MAKHO
		
		UNION
		
		SELECT SD.MASP,
			PX.NGAY,
			'' AS CTNHAP,
			PX.MAPX AS CTXUAT,
			'' AS SOLO,
			SUBSTR(CT.HANDUNG, 5,2) || '-' || SUBSTR(CT.HANDUNG, 1, 4) AS HANDUNG,
			KH.TENKH,
			0 AS SLNHAP,
			CT.SOLUONG AS SLXUAT
		FROM DUOC.CHITIETXUAT CT 
			JOIN DUOC.PHIEUXUAT PX ON CT.MAPX = PX.MAPX
			JOIN DUOC.KHACHHANG KH ON PX.MAKH = KH.MAKH
			JOIN DUOC.SANPHAMSD SD ON CT.MASPSD = SD.MASPSD
		WHERE SD.MASP = THEKHO.MASP
			AND PX.DADUYET = 1
			AND PX.NGAY BETWEEN (SELECT TUNGAY FROM DUOC.THOIGIANKHOASO WHERE NAMTHANG = THEKHO.NAMTHANG) AND (SELECT DENNGAY FROM DUOC.THOIGIANKHOASO WHERE NAMTHANG = THEKHO.NAMTHANG)
			AND PX.MAKHO = THEKHO.MAKHO
			) TK ON SP.MASP = TK.MASP
		WHERE SP.MASP = THEKHO.MASP	
		ORDER BY NGAY, CTXUAT, CTNHAP;


	-- Cursor left open for client application
	OPEN cursor1;
END P1;

GRANT BIND ON PACKAGE "DUOC"."P706013119" TO USER "ADMINISTRATOR" WITH GRANT OPTION;

GRANT CONTROL ON PACKAGE "DUOC"."P706013119" TO USER "ADMINISTRATOR";

GRANT EXECUTE ON FUNCTION "DUOC"."GETNAMTHANGTRUOC"(CHAR(6 OCTETS)) TO USER "ADMINISTRATOR" WITH GRANT OPTION;

GRANT EXECUTE ON PACKAGE "DUOC"."P706013119" TO USER "ADMINISTRATOR" WITH GRANT OPTION;

